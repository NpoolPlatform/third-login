// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/notification/pkg/db/ent/mailbox"
	"github.com/google/uuid"
)

// MailBox is the model entity for the MailBox schema.
type MailBox struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// FromUserID holds the value of the "from_user_id" field.
	FromUserID uuid.UUID `json:"from_user_id,omitempty"`
	// ToUserID holds the value of the "to_user_id" field.
	ToUserID uuid.UUID `json:"to_user_id,omitempty"`
	// AlreadyRead holds the value of the "already_read" field.
	AlreadyRead bool `json:"already_read,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MailBox) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case mailbox.FieldAlreadyRead:
			values[i] = new(sql.NullBool)
		case mailbox.FieldCreateAt, mailbox.FieldUpdateAt, mailbox.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case mailbox.FieldTitle, mailbox.FieldContent:
			values[i] = new(sql.NullString)
		case mailbox.FieldID, mailbox.FieldAppID, mailbox.FieldFromUserID, mailbox.FieldToUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MailBox", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MailBox fields.
func (mb *MailBox) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mailbox.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mb.ID = *value
			}
		case mailbox.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				mb.AppID = *value
			}
		case mailbox.FieldFromUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field from_user_id", values[i])
			} else if value != nil {
				mb.FromUserID = *value
			}
		case mailbox.FieldToUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field to_user_id", values[i])
			} else if value != nil {
				mb.ToUserID = *value
			}
		case mailbox.FieldAlreadyRead:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field already_read", values[i])
			} else if value.Valid {
				mb.AlreadyRead = value.Bool
			}
		case mailbox.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				mb.Title = value.String
			}
		case mailbox.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				mb.Content = value.String
			}
		case mailbox.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				mb.CreateAt = uint32(value.Int64)
			}
		case mailbox.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				mb.UpdateAt = uint32(value.Int64)
			}
		case mailbox.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				mb.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this MailBox.
// Note that you need to call MailBox.Unwrap() before calling this method if this MailBox
// was returned from a transaction, and the transaction was committed or rolled back.
func (mb *MailBox) Update() *MailBoxUpdateOne {
	return (&MailBoxClient{config: mb.config}).UpdateOne(mb)
}

// Unwrap unwraps the MailBox entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mb *MailBox) Unwrap() *MailBox {
	tx, ok := mb.config.driver.(*txDriver)
	if !ok {
		panic("ent: MailBox is not a transactional entity")
	}
	mb.config.driver = tx.drv
	return mb
}

// String implements the fmt.Stringer.
func (mb *MailBox) String() string {
	var builder strings.Builder
	builder.WriteString("MailBox(")
	builder.WriteString(fmt.Sprintf("id=%v", mb.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", mb.AppID))
	builder.WriteString(", from_user_id=")
	builder.WriteString(fmt.Sprintf("%v", mb.FromUserID))
	builder.WriteString(", to_user_id=")
	builder.WriteString(fmt.Sprintf("%v", mb.ToUserID))
	builder.WriteString(", already_read=")
	builder.WriteString(fmt.Sprintf("%v", mb.AlreadyRead))
	builder.WriteString(", title=")
	builder.WriteString(mb.Title)
	builder.WriteString(", content=")
	builder.WriteString(mb.Content)
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", mb.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", mb.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", mb.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// MailBoxes is a parsable slice of MailBox.
type MailBoxes []*MailBox

func (mb MailBoxes) config(cfg config) {
	for _i := range mb {
		mb[_i].config = cfg
	}
}
