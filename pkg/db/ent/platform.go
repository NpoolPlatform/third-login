// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/third-login-gateway/pkg/db/ent/platform"
	"github.com/google/uuid"
)

// Platform is the model entity for the Platform schema.
type Platform struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// PlatformAuthURL holds the value of the "platform_auth_url" field.
	PlatformAuthURL string `json:"platform_auth_url,omitempty"`
	// LogoURL holds the value of the "logo_url" field.
	LogoURL string `json:"logo_url,omitempty"`
	// PlatformAppKey holds the value of the "platform_app_key" field.
	PlatformAppKey string `json:"platform_app_key,omitempty"`
	// PlatformAppSecret holds the value of the "platform_app_secret" field.
	PlatformAppSecret string `json:"platform_app_secret,omitempty"`
	// RedirectURL holds the value of the "redirect_url" field.
	RedirectURL string `json:"redirect_url,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Platform) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case platform.FieldCreatedAt, platform.FieldUpdatedAt, platform.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case platform.FieldPlatform, platform.FieldPlatformAuthURL, platform.FieldLogoURL, platform.FieldPlatformAppKey, platform.FieldPlatformAppSecret, platform.FieldRedirectURL:
			values[i] = new(sql.NullString)
		case platform.FieldID, platform.FieldAppID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Platform", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Platform fields.
func (pl *Platform) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case platform.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pl.ID = *value
			}
		case platform.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pl.CreatedAt = uint32(value.Int64)
			}
		case platform.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pl.UpdatedAt = uint32(value.Int64)
			}
		case platform.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pl.DeletedAt = uint32(value.Int64)
			}
		case platform.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				pl.AppID = *value
			}
		case platform.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				pl.Platform = value.String
			}
		case platform.FieldPlatformAuthURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform_auth_url", values[i])
			} else if value.Valid {
				pl.PlatformAuthURL = value.String
			}
		case platform.FieldLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_url", values[i])
			} else if value.Valid {
				pl.LogoURL = value.String
			}
		case platform.FieldPlatformAppKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform_app_key", values[i])
			} else if value.Valid {
				pl.PlatformAppKey = value.String
			}
		case platform.FieldPlatformAppSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform_app_secret", values[i])
			} else if value.Valid {
				pl.PlatformAppSecret = value.String
			}
		case platform.FieldRedirectURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_url", values[i])
			} else if value.Valid {
				pl.RedirectURL = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Platform.
// Note that you need to call Platform.Unwrap() before calling this method if this Platform
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Platform) Update() *PlatformUpdateOne {
	return (&PlatformClient{config: pl.config}).UpdateOne(pl)
}

// Unwrap unwraps the Platform entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Platform) Unwrap() *Platform {
	tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Platform is not a transactional entity")
	}
	pl.config.driver = tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Platform) String() string {
	var builder strings.Builder
	builder.WriteString("Platform(")
	builder.WriteString(fmt.Sprintf("id=%v", pl.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", pl.CreatedAt))
	builder.WriteString(", updated_at=")
	builder.WriteString(fmt.Sprintf("%v", pl.UpdatedAt))
	builder.WriteString(", deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", pl.DeletedAt))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", pl.AppID))
	builder.WriteString(", platform=")
	builder.WriteString(pl.Platform)
	builder.WriteString(", platform_auth_url=")
	builder.WriteString(pl.PlatformAuthURL)
	builder.WriteString(", logo_url=")
	builder.WriteString(pl.LogoURL)
	builder.WriteString(", platform_app_key=")
	builder.WriteString(pl.PlatformAppKey)
	builder.WriteString(", platform_app_secret=")
	builder.WriteString(pl.PlatformAppSecret)
	builder.WriteString(", redirect_url=")
	builder.WriteString(pl.RedirectURL)
	builder.WriteByte(')')
	return builder.String()
}

// Platforms is a parsable slice of Platform.
type Platforms []*Platform

func (pl Platforms) config(cfg config) {
	for _i := range pl {
		pl[_i].config = cfg
	}
}
