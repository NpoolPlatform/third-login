// Code generated by entc, DO NOT EDIT.

package platform

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/third-login-gateway/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// PlatformAuthURL applies equality check predicate on the "platform_auth_url" field. It's identical to PlatformAuthURLEQ.
func PlatformAuthURL(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformAuthURL), v))
	})
}

// LogoURL applies equality check predicate on the "logo_url" field. It's identical to LogoURLEQ.
func LogoURL(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogoURL), v))
	})
}

// PlatformAppKey applies equality check predicate on the "platform_app_key" field. It's identical to PlatformAppKeyEQ.
func PlatformAppKey(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformAppKey), v))
	})
}

// PlatformAppSecret applies equality check predicate on the "platform_app_secret" field. It's identical to PlatformAppSecretEQ.
func PlatformAppSecret(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformAppSecret), v))
	})
}

// RedirectURL applies equality check predicate on the "redirect_url" field. It's identical to RedirectURLEQ.
func RedirectURL(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRedirectURL), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Platform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Platform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Platform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Platform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Platform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Platform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.Platform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.Platform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatform), v))
	})
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.Platform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlatform), v...))
	})
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.Platform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlatform), v...))
	})
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatform), v))
	})
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatform), v))
	})
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatform), v))
	})
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatform), v))
	})
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatform), v))
	})
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatform), v))
	})
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatform), v))
	})
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatform), v))
	})
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatform), v))
	})
}

// PlatformAuthURLEQ applies the EQ predicate on the "platform_auth_url" field.
func PlatformAuthURLEQ(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformAuthURL), v))
	})
}

// PlatformAuthURLNEQ applies the NEQ predicate on the "platform_auth_url" field.
func PlatformAuthURLNEQ(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatformAuthURL), v))
	})
}

// PlatformAuthURLIn applies the In predicate on the "platform_auth_url" field.
func PlatformAuthURLIn(vs ...string) predicate.Platform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlatformAuthURL), v...))
	})
}

// PlatformAuthURLNotIn applies the NotIn predicate on the "platform_auth_url" field.
func PlatformAuthURLNotIn(vs ...string) predicate.Platform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlatformAuthURL), v...))
	})
}

// PlatformAuthURLGT applies the GT predicate on the "platform_auth_url" field.
func PlatformAuthURLGT(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatformAuthURL), v))
	})
}

// PlatformAuthURLGTE applies the GTE predicate on the "platform_auth_url" field.
func PlatformAuthURLGTE(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatformAuthURL), v))
	})
}

// PlatformAuthURLLT applies the LT predicate on the "platform_auth_url" field.
func PlatformAuthURLLT(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatformAuthURL), v))
	})
}

// PlatformAuthURLLTE applies the LTE predicate on the "platform_auth_url" field.
func PlatformAuthURLLTE(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatformAuthURL), v))
	})
}

// PlatformAuthURLContains applies the Contains predicate on the "platform_auth_url" field.
func PlatformAuthURLContains(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatformAuthURL), v))
	})
}

// PlatformAuthURLHasPrefix applies the HasPrefix predicate on the "platform_auth_url" field.
func PlatformAuthURLHasPrefix(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatformAuthURL), v))
	})
}

// PlatformAuthURLHasSuffix applies the HasSuffix predicate on the "platform_auth_url" field.
func PlatformAuthURLHasSuffix(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatformAuthURL), v))
	})
}

// PlatformAuthURLEqualFold applies the EqualFold predicate on the "platform_auth_url" field.
func PlatformAuthURLEqualFold(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatformAuthURL), v))
	})
}

// PlatformAuthURLContainsFold applies the ContainsFold predicate on the "platform_auth_url" field.
func PlatformAuthURLContainsFold(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatformAuthURL), v))
	})
}

// LogoURLEQ applies the EQ predicate on the "logo_url" field.
func LogoURLEQ(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogoURL), v))
	})
}

// LogoURLNEQ applies the NEQ predicate on the "logo_url" field.
func LogoURLNEQ(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLogoURL), v))
	})
}

// LogoURLIn applies the In predicate on the "logo_url" field.
func LogoURLIn(vs ...string) predicate.Platform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLogoURL), v...))
	})
}

// LogoURLNotIn applies the NotIn predicate on the "logo_url" field.
func LogoURLNotIn(vs ...string) predicate.Platform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLogoURL), v...))
	})
}

// LogoURLGT applies the GT predicate on the "logo_url" field.
func LogoURLGT(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLogoURL), v))
	})
}

// LogoURLGTE applies the GTE predicate on the "logo_url" field.
func LogoURLGTE(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLogoURL), v))
	})
}

// LogoURLLT applies the LT predicate on the "logo_url" field.
func LogoURLLT(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLogoURL), v))
	})
}

// LogoURLLTE applies the LTE predicate on the "logo_url" field.
func LogoURLLTE(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLogoURL), v))
	})
}

// LogoURLContains applies the Contains predicate on the "logo_url" field.
func LogoURLContains(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLogoURL), v))
	})
}

// LogoURLHasPrefix applies the HasPrefix predicate on the "logo_url" field.
func LogoURLHasPrefix(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLogoURL), v))
	})
}

// LogoURLHasSuffix applies the HasSuffix predicate on the "logo_url" field.
func LogoURLHasSuffix(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLogoURL), v))
	})
}

// LogoURLEqualFold applies the EqualFold predicate on the "logo_url" field.
func LogoURLEqualFold(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLogoURL), v))
	})
}

// LogoURLContainsFold applies the ContainsFold predicate on the "logo_url" field.
func LogoURLContainsFold(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLogoURL), v))
	})
}

// PlatformAppKeyEQ applies the EQ predicate on the "platform_app_key" field.
func PlatformAppKeyEQ(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformAppKey), v))
	})
}

// PlatformAppKeyNEQ applies the NEQ predicate on the "platform_app_key" field.
func PlatformAppKeyNEQ(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatformAppKey), v))
	})
}

// PlatformAppKeyIn applies the In predicate on the "platform_app_key" field.
func PlatformAppKeyIn(vs ...string) predicate.Platform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlatformAppKey), v...))
	})
}

// PlatformAppKeyNotIn applies the NotIn predicate on the "platform_app_key" field.
func PlatformAppKeyNotIn(vs ...string) predicate.Platform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlatformAppKey), v...))
	})
}

// PlatformAppKeyGT applies the GT predicate on the "platform_app_key" field.
func PlatformAppKeyGT(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatformAppKey), v))
	})
}

// PlatformAppKeyGTE applies the GTE predicate on the "platform_app_key" field.
func PlatformAppKeyGTE(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatformAppKey), v))
	})
}

// PlatformAppKeyLT applies the LT predicate on the "platform_app_key" field.
func PlatformAppKeyLT(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatformAppKey), v))
	})
}

// PlatformAppKeyLTE applies the LTE predicate on the "platform_app_key" field.
func PlatformAppKeyLTE(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatformAppKey), v))
	})
}

// PlatformAppKeyContains applies the Contains predicate on the "platform_app_key" field.
func PlatformAppKeyContains(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatformAppKey), v))
	})
}

// PlatformAppKeyHasPrefix applies the HasPrefix predicate on the "platform_app_key" field.
func PlatformAppKeyHasPrefix(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatformAppKey), v))
	})
}

// PlatformAppKeyHasSuffix applies the HasSuffix predicate on the "platform_app_key" field.
func PlatformAppKeyHasSuffix(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatformAppKey), v))
	})
}

// PlatformAppKeyEqualFold applies the EqualFold predicate on the "platform_app_key" field.
func PlatformAppKeyEqualFold(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatformAppKey), v))
	})
}

// PlatformAppKeyContainsFold applies the ContainsFold predicate on the "platform_app_key" field.
func PlatformAppKeyContainsFold(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatformAppKey), v))
	})
}

// PlatformAppSecretEQ applies the EQ predicate on the "platform_app_secret" field.
func PlatformAppSecretEQ(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformAppSecret), v))
	})
}

// PlatformAppSecretNEQ applies the NEQ predicate on the "platform_app_secret" field.
func PlatformAppSecretNEQ(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatformAppSecret), v))
	})
}

// PlatformAppSecretIn applies the In predicate on the "platform_app_secret" field.
func PlatformAppSecretIn(vs ...string) predicate.Platform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlatformAppSecret), v...))
	})
}

// PlatformAppSecretNotIn applies the NotIn predicate on the "platform_app_secret" field.
func PlatformAppSecretNotIn(vs ...string) predicate.Platform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlatformAppSecret), v...))
	})
}

// PlatformAppSecretGT applies the GT predicate on the "platform_app_secret" field.
func PlatformAppSecretGT(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatformAppSecret), v))
	})
}

// PlatformAppSecretGTE applies the GTE predicate on the "platform_app_secret" field.
func PlatformAppSecretGTE(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatformAppSecret), v))
	})
}

// PlatformAppSecretLT applies the LT predicate on the "platform_app_secret" field.
func PlatformAppSecretLT(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatformAppSecret), v))
	})
}

// PlatformAppSecretLTE applies the LTE predicate on the "platform_app_secret" field.
func PlatformAppSecretLTE(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatformAppSecret), v))
	})
}

// PlatformAppSecretContains applies the Contains predicate on the "platform_app_secret" field.
func PlatformAppSecretContains(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatformAppSecret), v))
	})
}

// PlatformAppSecretHasPrefix applies the HasPrefix predicate on the "platform_app_secret" field.
func PlatformAppSecretHasPrefix(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatformAppSecret), v))
	})
}

// PlatformAppSecretHasSuffix applies the HasSuffix predicate on the "platform_app_secret" field.
func PlatformAppSecretHasSuffix(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatformAppSecret), v))
	})
}

// PlatformAppSecretEqualFold applies the EqualFold predicate on the "platform_app_secret" field.
func PlatformAppSecretEqualFold(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatformAppSecret), v))
	})
}

// PlatformAppSecretContainsFold applies the ContainsFold predicate on the "platform_app_secret" field.
func PlatformAppSecretContainsFold(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatformAppSecret), v))
	})
}

// RedirectURLEQ applies the EQ predicate on the "redirect_url" field.
func RedirectURLEQ(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRedirectURL), v))
	})
}

// RedirectURLNEQ applies the NEQ predicate on the "redirect_url" field.
func RedirectURLNEQ(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRedirectURL), v))
	})
}

// RedirectURLIn applies the In predicate on the "redirect_url" field.
func RedirectURLIn(vs ...string) predicate.Platform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRedirectURL), v...))
	})
}

// RedirectURLNotIn applies the NotIn predicate on the "redirect_url" field.
func RedirectURLNotIn(vs ...string) predicate.Platform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Platform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRedirectURL), v...))
	})
}

// RedirectURLGT applies the GT predicate on the "redirect_url" field.
func RedirectURLGT(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRedirectURL), v))
	})
}

// RedirectURLGTE applies the GTE predicate on the "redirect_url" field.
func RedirectURLGTE(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRedirectURL), v))
	})
}

// RedirectURLLT applies the LT predicate on the "redirect_url" field.
func RedirectURLLT(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRedirectURL), v))
	})
}

// RedirectURLLTE applies the LTE predicate on the "redirect_url" field.
func RedirectURLLTE(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRedirectURL), v))
	})
}

// RedirectURLContains applies the Contains predicate on the "redirect_url" field.
func RedirectURLContains(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRedirectURL), v))
	})
}

// RedirectURLHasPrefix applies the HasPrefix predicate on the "redirect_url" field.
func RedirectURLHasPrefix(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRedirectURL), v))
	})
}

// RedirectURLHasSuffix applies the HasSuffix predicate on the "redirect_url" field.
func RedirectURLHasSuffix(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRedirectURL), v))
	})
}

// RedirectURLEqualFold applies the EqualFold predicate on the "redirect_url" field.
func RedirectURLEqualFold(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRedirectURL), v))
	})
}

// RedirectURLContainsFold applies the ContainsFold predicate on the "redirect_url" field.
func RedirectURLContainsFold(v string) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRedirectURL), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Platform) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Platform) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Platform) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		p(s.Not())
	})
}
