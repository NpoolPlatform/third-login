// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/third-login-gateway/pkg/db/ent/thirdauth"
	"github.com/google/uuid"
)

// ThirdAuth is the model entity for the ThirdAuth schema.
type ThirdAuth struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// Third holds the value of the "third" field.
	Third string `json:"third,omitempty"`
	// LogoURL holds the value of the "logo_url" field.
	LogoURL string `json:"logo_url,omitempty"`
	// ThirdAppKey holds the value of the "third_app_key" field.
	ThirdAppKey string `json:"third_app_key,omitempty"`
	// ThirdAppSecret holds the value of the "third_app_secret" field.
	ThirdAppSecret string `json:"third_app_secret,omitempty"`
	// RedirectURL holds the value of the "redirect_url" field.
	RedirectURL string `json:"redirect_url,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ThirdAuth) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case thirdauth.FieldCreatedAt, thirdauth.FieldUpdatedAt, thirdauth.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case thirdauth.FieldThird, thirdauth.FieldLogoURL, thirdauth.FieldThirdAppKey, thirdauth.FieldThirdAppSecret, thirdauth.FieldRedirectURL:
			values[i] = new(sql.NullString)
		case thirdauth.FieldID, thirdauth.FieldAppID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ThirdAuth", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ThirdAuth fields.
func (ta *ThirdAuth) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case thirdauth.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ta.ID = *value
			}
		case thirdauth.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ta.CreatedAt = uint32(value.Int64)
			}
		case thirdauth.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ta.UpdatedAt = uint32(value.Int64)
			}
		case thirdauth.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ta.DeletedAt = uint32(value.Int64)
			}
		case thirdauth.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				ta.AppID = *value
			}
		case thirdauth.FieldThird:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field third", values[i])
			} else if value.Valid {
				ta.Third = value.String
			}
		case thirdauth.FieldLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_url", values[i])
			} else if value.Valid {
				ta.LogoURL = value.String
			}
		case thirdauth.FieldThirdAppKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field third_app_key", values[i])
			} else if value.Valid {
				ta.ThirdAppKey = value.String
			}
		case thirdauth.FieldThirdAppSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field third_app_secret", values[i])
			} else if value.Valid {
				ta.ThirdAppSecret = value.String
			}
		case thirdauth.FieldRedirectURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_url", values[i])
			} else if value.Valid {
				ta.RedirectURL = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ThirdAuth.
// Note that you need to call ThirdAuth.Unwrap() before calling this method if this ThirdAuth
// was returned from a transaction, and the transaction was committed or rolled back.
func (ta *ThirdAuth) Update() *ThirdAuthUpdateOne {
	return (&ThirdAuthClient{config: ta.config}).UpdateOne(ta)
}

// Unwrap unwraps the ThirdAuth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ta *ThirdAuth) Unwrap() *ThirdAuth {
	tx, ok := ta.config.driver.(*txDriver)
	if !ok {
		panic("ent: ThirdAuth is not a transactional entity")
	}
	ta.config.driver = tx.drv
	return ta
}

// String implements the fmt.Stringer.
func (ta *ThirdAuth) String() string {
	var builder strings.Builder
	builder.WriteString("ThirdAuth(")
	builder.WriteString(fmt.Sprintf("id=%v", ta.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", ta.CreatedAt))
	builder.WriteString(", updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ta.UpdatedAt))
	builder.WriteString(", deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ta.DeletedAt))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", ta.AppID))
	builder.WriteString(", third=")
	builder.WriteString(ta.Third)
	builder.WriteString(", logo_url=")
	builder.WriteString(ta.LogoURL)
	builder.WriteString(", third_app_key=")
	builder.WriteString(ta.ThirdAppKey)
	builder.WriteString(", third_app_secret=")
	builder.WriteString(ta.ThirdAppSecret)
	builder.WriteString(", redirect_url=")
	builder.WriteString(ta.RedirectURL)
	builder.WriteByte(')')
	return builder.String()
}

// ThirdAuths is a parsable slice of ThirdAuth.
type ThirdAuths []*ThirdAuth

func (ta ThirdAuths) config(cfg config) {
	for _i := range ta {
		ta[_i].config = cfg
	}
}
