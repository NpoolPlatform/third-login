// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/third-login-gateway/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/third-login-gateway/pkg/db/ent/thirdauth"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeThirdAuth = "ThirdAuth"
)

// ThirdAuthMutation represents an operation that mutates the ThirdAuth nodes in the graph.
type ThirdAuthMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	created_at       *uint32
	addcreated_at    *int32
	updated_at       *uint32
	addupdated_at    *int32
	deleted_at       *uint32
	adddeleted_at    *int32
	app_id           *uuid.UUID
	third            *string
	logo_url         *string
	third_app_key    *string
	third_app_secret *string
	redirect_url     *string
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*ThirdAuth, error)
	predicates       []predicate.ThirdAuth
}

var _ ent.Mutation = (*ThirdAuthMutation)(nil)

// thirdauthOption allows management of the mutation configuration using functional options.
type thirdauthOption func(*ThirdAuthMutation)

// newThirdAuthMutation creates new mutation for the ThirdAuth entity.
func newThirdAuthMutation(c config, op Op, opts ...thirdauthOption) *ThirdAuthMutation {
	m := &ThirdAuthMutation{
		config:        c,
		op:            op,
		typ:           TypeThirdAuth,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withThirdAuthID sets the ID field of the mutation.
func withThirdAuthID(id uuid.UUID) thirdauthOption {
	return func(m *ThirdAuthMutation) {
		var (
			err   error
			once  sync.Once
			value *ThirdAuth
		)
		m.oldValue = func(ctx context.Context) (*ThirdAuth, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ThirdAuth.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withThirdAuth sets the old ThirdAuth of the mutation.
func withThirdAuth(node *ThirdAuth) thirdauthOption {
	return func(m *ThirdAuthMutation) {
		m.oldValue = func(context.Context) (*ThirdAuth, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ThirdAuthMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ThirdAuthMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ThirdAuth entities.
func (m *ThirdAuthMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ThirdAuthMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ThirdAuthMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ThirdAuth.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ThirdAuthMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ThirdAuthMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ThirdAuth entity.
// If the ThirdAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThirdAuthMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *ThirdAuthMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *ThirdAuthMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ThirdAuthMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ThirdAuthMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ThirdAuthMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ThirdAuth entity.
// If the ThirdAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThirdAuthMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *ThirdAuthMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *ThirdAuthMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ThirdAuthMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ThirdAuthMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ThirdAuthMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the ThirdAuth entity.
// If the ThirdAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThirdAuthMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *ThirdAuthMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *ThirdAuthMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ThirdAuthMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *ThirdAuthMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *ThirdAuthMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the ThirdAuth entity.
// If the ThirdAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThirdAuthMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *ThirdAuthMutation) ResetAppID() {
	m.app_id = nil
}

// SetThird sets the "third" field.
func (m *ThirdAuthMutation) SetThird(s string) {
	m.third = &s
}

// Third returns the value of the "third" field in the mutation.
func (m *ThirdAuthMutation) Third() (r string, exists bool) {
	v := m.third
	if v == nil {
		return
	}
	return *v, true
}

// OldThird returns the old "third" field's value of the ThirdAuth entity.
// If the ThirdAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThirdAuthMutation) OldThird(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThird is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThird requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThird: %w", err)
	}
	return oldValue.Third, nil
}

// ResetThird resets all changes to the "third" field.
func (m *ThirdAuthMutation) ResetThird() {
	m.third = nil
}

// SetLogoURL sets the "logo_url" field.
func (m *ThirdAuthMutation) SetLogoURL(s string) {
	m.logo_url = &s
}

// LogoURL returns the value of the "logo_url" field in the mutation.
func (m *ThirdAuthMutation) LogoURL() (r string, exists bool) {
	v := m.logo_url
	if v == nil {
		return
	}
	return *v, true
}

// OldLogoURL returns the old "logo_url" field's value of the ThirdAuth entity.
// If the ThirdAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThirdAuthMutation) OldLogoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogoURL: %w", err)
	}
	return oldValue.LogoURL, nil
}

// ResetLogoURL resets all changes to the "logo_url" field.
func (m *ThirdAuthMutation) ResetLogoURL() {
	m.logo_url = nil
}

// SetThirdAppKey sets the "third_app_key" field.
func (m *ThirdAuthMutation) SetThirdAppKey(s string) {
	m.third_app_key = &s
}

// ThirdAppKey returns the value of the "third_app_key" field in the mutation.
func (m *ThirdAuthMutation) ThirdAppKey() (r string, exists bool) {
	v := m.third_app_key
	if v == nil {
		return
	}
	return *v, true
}

// OldThirdAppKey returns the old "third_app_key" field's value of the ThirdAuth entity.
// If the ThirdAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThirdAuthMutation) OldThirdAppKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThirdAppKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThirdAppKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThirdAppKey: %w", err)
	}
	return oldValue.ThirdAppKey, nil
}

// ResetThirdAppKey resets all changes to the "third_app_key" field.
func (m *ThirdAuthMutation) ResetThirdAppKey() {
	m.third_app_key = nil
}

// SetThirdAppSecret sets the "third_app_secret" field.
func (m *ThirdAuthMutation) SetThirdAppSecret(s string) {
	m.third_app_secret = &s
}

// ThirdAppSecret returns the value of the "third_app_secret" field in the mutation.
func (m *ThirdAuthMutation) ThirdAppSecret() (r string, exists bool) {
	v := m.third_app_secret
	if v == nil {
		return
	}
	return *v, true
}

// OldThirdAppSecret returns the old "third_app_secret" field's value of the ThirdAuth entity.
// If the ThirdAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThirdAuthMutation) OldThirdAppSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThirdAppSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThirdAppSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThirdAppSecret: %w", err)
	}
	return oldValue.ThirdAppSecret, nil
}

// ResetThirdAppSecret resets all changes to the "third_app_secret" field.
func (m *ThirdAuthMutation) ResetThirdAppSecret() {
	m.third_app_secret = nil
}

// SetRedirectURL sets the "redirect_url" field.
func (m *ThirdAuthMutation) SetRedirectURL(s string) {
	m.redirect_url = &s
}

// RedirectURL returns the value of the "redirect_url" field in the mutation.
func (m *ThirdAuthMutation) RedirectURL() (r string, exists bool) {
	v := m.redirect_url
	if v == nil {
		return
	}
	return *v, true
}

// OldRedirectURL returns the old "redirect_url" field's value of the ThirdAuth entity.
// If the ThirdAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThirdAuthMutation) OldRedirectURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRedirectURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRedirectURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRedirectURL: %w", err)
	}
	return oldValue.RedirectURL, nil
}

// ResetRedirectURL resets all changes to the "redirect_url" field.
func (m *ThirdAuthMutation) ResetRedirectURL() {
	m.redirect_url = nil
}

// Where appends a list predicates to the ThirdAuthMutation builder.
func (m *ThirdAuthMutation) Where(ps ...predicate.ThirdAuth) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ThirdAuthMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ThirdAuth).
func (m *ThirdAuthMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ThirdAuthMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, thirdauth.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, thirdauth.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, thirdauth.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, thirdauth.FieldAppID)
	}
	if m.third != nil {
		fields = append(fields, thirdauth.FieldThird)
	}
	if m.logo_url != nil {
		fields = append(fields, thirdauth.FieldLogoURL)
	}
	if m.third_app_key != nil {
		fields = append(fields, thirdauth.FieldThirdAppKey)
	}
	if m.third_app_secret != nil {
		fields = append(fields, thirdauth.FieldThirdAppSecret)
	}
	if m.redirect_url != nil {
		fields = append(fields, thirdauth.FieldRedirectURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ThirdAuthMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case thirdauth.FieldCreatedAt:
		return m.CreatedAt()
	case thirdauth.FieldUpdatedAt:
		return m.UpdatedAt()
	case thirdauth.FieldDeletedAt:
		return m.DeletedAt()
	case thirdauth.FieldAppID:
		return m.AppID()
	case thirdauth.FieldThird:
		return m.Third()
	case thirdauth.FieldLogoURL:
		return m.LogoURL()
	case thirdauth.FieldThirdAppKey:
		return m.ThirdAppKey()
	case thirdauth.FieldThirdAppSecret:
		return m.ThirdAppSecret()
	case thirdauth.FieldRedirectURL:
		return m.RedirectURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ThirdAuthMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case thirdauth.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case thirdauth.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case thirdauth.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case thirdauth.FieldAppID:
		return m.OldAppID(ctx)
	case thirdauth.FieldThird:
		return m.OldThird(ctx)
	case thirdauth.FieldLogoURL:
		return m.OldLogoURL(ctx)
	case thirdauth.FieldThirdAppKey:
		return m.OldThirdAppKey(ctx)
	case thirdauth.FieldThirdAppSecret:
		return m.OldThirdAppSecret(ctx)
	case thirdauth.FieldRedirectURL:
		return m.OldRedirectURL(ctx)
	}
	return nil, fmt.Errorf("unknown ThirdAuth field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ThirdAuthMutation) SetField(name string, value ent.Value) error {
	switch name {
	case thirdauth.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case thirdauth.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case thirdauth.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case thirdauth.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case thirdauth.FieldThird:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThird(v)
		return nil
	case thirdauth.FieldLogoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogoURL(v)
		return nil
	case thirdauth.FieldThirdAppKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThirdAppKey(v)
		return nil
	case thirdauth.FieldThirdAppSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThirdAppSecret(v)
		return nil
	case thirdauth.FieldRedirectURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRedirectURL(v)
		return nil
	}
	return fmt.Errorf("unknown ThirdAuth field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ThirdAuthMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, thirdauth.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, thirdauth.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, thirdauth.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ThirdAuthMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case thirdauth.FieldCreatedAt:
		return m.AddedCreatedAt()
	case thirdauth.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case thirdauth.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ThirdAuthMutation) AddField(name string, value ent.Value) error {
	switch name {
	case thirdauth.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case thirdauth.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case thirdauth.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ThirdAuth numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ThirdAuthMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ThirdAuthMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ThirdAuthMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ThirdAuth nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ThirdAuthMutation) ResetField(name string) error {
	switch name {
	case thirdauth.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case thirdauth.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case thirdauth.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case thirdauth.FieldAppID:
		m.ResetAppID()
		return nil
	case thirdauth.FieldThird:
		m.ResetThird()
		return nil
	case thirdauth.FieldLogoURL:
		m.ResetLogoURL()
		return nil
	case thirdauth.FieldThirdAppKey:
		m.ResetThirdAppKey()
		return nil
	case thirdauth.FieldThirdAppSecret:
		m.ResetThirdAppSecret()
		return nil
	case thirdauth.FieldRedirectURL:
		m.ResetRedirectURL()
		return nil
	}
	return fmt.Errorf("unknown ThirdAuth field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ThirdAuthMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ThirdAuthMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ThirdAuthMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ThirdAuthMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ThirdAuthMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ThirdAuthMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ThirdAuthMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ThirdAuth unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ThirdAuthMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ThirdAuth edge %s", name)
}
