// Code generated by entc, DO NOT EDIT.

package thirdauth

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/third-login-gateway/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// Third applies equality check predicate on the "third" field. It's identical to ThirdEQ.
func Third(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThird), v))
	})
}

// LogoURL applies equality check predicate on the "logo_url" field. It's identical to LogoURLEQ.
func LogoURL(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogoURL), v))
	})
}

// ThirdAppKey applies equality check predicate on the "third_app_key" field. It's identical to ThirdAppKeyEQ.
func ThirdAppKey(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdAppKey), v))
	})
}

// ThirdAppSecret applies equality check predicate on the "third_app_secret" field. It's identical to ThirdAppSecretEQ.
func ThirdAppSecret(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdAppSecret), v))
	})
}

// RedirectURL applies equality check predicate on the "redirect_url" field. It's identical to RedirectURLEQ.
func RedirectURL(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRedirectURL), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.ThirdAuth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThirdAuth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.ThirdAuth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThirdAuth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.ThirdAuth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThirdAuth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.ThirdAuth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThirdAuth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.ThirdAuth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThirdAuth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.ThirdAuth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThirdAuth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.ThirdAuth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThirdAuth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.ThirdAuth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThirdAuth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// ThirdEQ applies the EQ predicate on the "third" field.
func ThirdEQ(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThird), v))
	})
}

// ThirdNEQ applies the NEQ predicate on the "third" field.
func ThirdNEQ(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThird), v))
	})
}

// ThirdIn applies the In predicate on the "third" field.
func ThirdIn(vs ...string) predicate.ThirdAuth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThirdAuth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThird), v...))
	})
}

// ThirdNotIn applies the NotIn predicate on the "third" field.
func ThirdNotIn(vs ...string) predicate.ThirdAuth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThirdAuth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThird), v...))
	})
}

// ThirdGT applies the GT predicate on the "third" field.
func ThirdGT(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThird), v))
	})
}

// ThirdGTE applies the GTE predicate on the "third" field.
func ThirdGTE(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThird), v))
	})
}

// ThirdLT applies the LT predicate on the "third" field.
func ThirdLT(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThird), v))
	})
}

// ThirdLTE applies the LTE predicate on the "third" field.
func ThirdLTE(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThird), v))
	})
}

// ThirdContains applies the Contains predicate on the "third" field.
func ThirdContains(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThird), v))
	})
}

// ThirdHasPrefix applies the HasPrefix predicate on the "third" field.
func ThirdHasPrefix(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThird), v))
	})
}

// ThirdHasSuffix applies the HasSuffix predicate on the "third" field.
func ThirdHasSuffix(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThird), v))
	})
}

// ThirdEqualFold applies the EqualFold predicate on the "third" field.
func ThirdEqualFold(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThird), v))
	})
}

// ThirdContainsFold applies the ContainsFold predicate on the "third" field.
func ThirdContainsFold(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThird), v))
	})
}

// LogoURLEQ applies the EQ predicate on the "logo_url" field.
func LogoURLEQ(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogoURL), v))
	})
}

// LogoURLNEQ applies the NEQ predicate on the "logo_url" field.
func LogoURLNEQ(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLogoURL), v))
	})
}

// LogoURLIn applies the In predicate on the "logo_url" field.
func LogoURLIn(vs ...string) predicate.ThirdAuth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThirdAuth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLogoURL), v...))
	})
}

// LogoURLNotIn applies the NotIn predicate on the "logo_url" field.
func LogoURLNotIn(vs ...string) predicate.ThirdAuth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThirdAuth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLogoURL), v...))
	})
}

// LogoURLGT applies the GT predicate on the "logo_url" field.
func LogoURLGT(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLogoURL), v))
	})
}

// LogoURLGTE applies the GTE predicate on the "logo_url" field.
func LogoURLGTE(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLogoURL), v))
	})
}

// LogoURLLT applies the LT predicate on the "logo_url" field.
func LogoURLLT(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLogoURL), v))
	})
}

// LogoURLLTE applies the LTE predicate on the "logo_url" field.
func LogoURLLTE(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLogoURL), v))
	})
}

// LogoURLContains applies the Contains predicate on the "logo_url" field.
func LogoURLContains(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLogoURL), v))
	})
}

// LogoURLHasPrefix applies the HasPrefix predicate on the "logo_url" field.
func LogoURLHasPrefix(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLogoURL), v))
	})
}

// LogoURLHasSuffix applies the HasSuffix predicate on the "logo_url" field.
func LogoURLHasSuffix(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLogoURL), v))
	})
}

// LogoURLEqualFold applies the EqualFold predicate on the "logo_url" field.
func LogoURLEqualFold(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLogoURL), v))
	})
}

// LogoURLContainsFold applies the ContainsFold predicate on the "logo_url" field.
func LogoURLContainsFold(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLogoURL), v))
	})
}

// ThirdAppKeyEQ applies the EQ predicate on the "third_app_key" field.
func ThirdAppKeyEQ(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdAppKey), v))
	})
}

// ThirdAppKeyNEQ applies the NEQ predicate on the "third_app_key" field.
func ThirdAppKeyNEQ(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThirdAppKey), v))
	})
}

// ThirdAppKeyIn applies the In predicate on the "third_app_key" field.
func ThirdAppKeyIn(vs ...string) predicate.ThirdAuth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThirdAuth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThirdAppKey), v...))
	})
}

// ThirdAppKeyNotIn applies the NotIn predicate on the "third_app_key" field.
func ThirdAppKeyNotIn(vs ...string) predicate.ThirdAuth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThirdAuth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThirdAppKey), v...))
	})
}

// ThirdAppKeyGT applies the GT predicate on the "third_app_key" field.
func ThirdAppKeyGT(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThirdAppKey), v))
	})
}

// ThirdAppKeyGTE applies the GTE predicate on the "third_app_key" field.
func ThirdAppKeyGTE(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThirdAppKey), v))
	})
}

// ThirdAppKeyLT applies the LT predicate on the "third_app_key" field.
func ThirdAppKeyLT(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThirdAppKey), v))
	})
}

// ThirdAppKeyLTE applies the LTE predicate on the "third_app_key" field.
func ThirdAppKeyLTE(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThirdAppKey), v))
	})
}

// ThirdAppKeyContains applies the Contains predicate on the "third_app_key" field.
func ThirdAppKeyContains(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThirdAppKey), v))
	})
}

// ThirdAppKeyHasPrefix applies the HasPrefix predicate on the "third_app_key" field.
func ThirdAppKeyHasPrefix(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThirdAppKey), v))
	})
}

// ThirdAppKeyHasSuffix applies the HasSuffix predicate on the "third_app_key" field.
func ThirdAppKeyHasSuffix(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThirdAppKey), v))
	})
}

// ThirdAppKeyEqualFold applies the EqualFold predicate on the "third_app_key" field.
func ThirdAppKeyEqualFold(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThirdAppKey), v))
	})
}

// ThirdAppKeyContainsFold applies the ContainsFold predicate on the "third_app_key" field.
func ThirdAppKeyContainsFold(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThirdAppKey), v))
	})
}

// ThirdAppSecretEQ applies the EQ predicate on the "third_app_secret" field.
func ThirdAppSecretEQ(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdAppSecret), v))
	})
}

// ThirdAppSecretNEQ applies the NEQ predicate on the "third_app_secret" field.
func ThirdAppSecretNEQ(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThirdAppSecret), v))
	})
}

// ThirdAppSecretIn applies the In predicate on the "third_app_secret" field.
func ThirdAppSecretIn(vs ...string) predicate.ThirdAuth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThirdAuth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThirdAppSecret), v...))
	})
}

// ThirdAppSecretNotIn applies the NotIn predicate on the "third_app_secret" field.
func ThirdAppSecretNotIn(vs ...string) predicate.ThirdAuth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThirdAuth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThirdAppSecret), v...))
	})
}

// ThirdAppSecretGT applies the GT predicate on the "third_app_secret" field.
func ThirdAppSecretGT(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThirdAppSecret), v))
	})
}

// ThirdAppSecretGTE applies the GTE predicate on the "third_app_secret" field.
func ThirdAppSecretGTE(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThirdAppSecret), v))
	})
}

// ThirdAppSecretLT applies the LT predicate on the "third_app_secret" field.
func ThirdAppSecretLT(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThirdAppSecret), v))
	})
}

// ThirdAppSecretLTE applies the LTE predicate on the "third_app_secret" field.
func ThirdAppSecretLTE(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThirdAppSecret), v))
	})
}

// ThirdAppSecretContains applies the Contains predicate on the "third_app_secret" field.
func ThirdAppSecretContains(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThirdAppSecret), v))
	})
}

// ThirdAppSecretHasPrefix applies the HasPrefix predicate on the "third_app_secret" field.
func ThirdAppSecretHasPrefix(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThirdAppSecret), v))
	})
}

// ThirdAppSecretHasSuffix applies the HasSuffix predicate on the "third_app_secret" field.
func ThirdAppSecretHasSuffix(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThirdAppSecret), v))
	})
}

// ThirdAppSecretEqualFold applies the EqualFold predicate on the "third_app_secret" field.
func ThirdAppSecretEqualFold(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThirdAppSecret), v))
	})
}

// ThirdAppSecretContainsFold applies the ContainsFold predicate on the "third_app_secret" field.
func ThirdAppSecretContainsFold(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThirdAppSecret), v))
	})
}

// RedirectURLEQ applies the EQ predicate on the "redirect_url" field.
func RedirectURLEQ(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRedirectURL), v))
	})
}

// RedirectURLNEQ applies the NEQ predicate on the "redirect_url" field.
func RedirectURLNEQ(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRedirectURL), v))
	})
}

// RedirectURLIn applies the In predicate on the "redirect_url" field.
func RedirectURLIn(vs ...string) predicate.ThirdAuth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThirdAuth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRedirectURL), v...))
	})
}

// RedirectURLNotIn applies the NotIn predicate on the "redirect_url" field.
func RedirectURLNotIn(vs ...string) predicate.ThirdAuth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThirdAuth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRedirectURL), v...))
	})
}

// RedirectURLGT applies the GT predicate on the "redirect_url" field.
func RedirectURLGT(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRedirectURL), v))
	})
}

// RedirectURLGTE applies the GTE predicate on the "redirect_url" field.
func RedirectURLGTE(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRedirectURL), v))
	})
}

// RedirectURLLT applies the LT predicate on the "redirect_url" field.
func RedirectURLLT(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRedirectURL), v))
	})
}

// RedirectURLLTE applies the LTE predicate on the "redirect_url" field.
func RedirectURLLTE(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRedirectURL), v))
	})
}

// RedirectURLContains applies the Contains predicate on the "redirect_url" field.
func RedirectURLContains(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRedirectURL), v))
	})
}

// RedirectURLHasPrefix applies the HasPrefix predicate on the "redirect_url" field.
func RedirectURLHasPrefix(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRedirectURL), v))
	})
}

// RedirectURLHasSuffix applies the HasSuffix predicate on the "redirect_url" field.
func RedirectURLHasSuffix(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRedirectURL), v))
	})
}

// RedirectURLEqualFold applies the EqualFold predicate on the "redirect_url" field.
func RedirectURLEqualFold(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRedirectURL), v))
	})
}

// RedirectURLContainsFold applies the ContainsFold predicate on the "redirect_url" field.
func RedirectURLContainsFold(v string) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRedirectURL), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ThirdAuth) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ThirdAuth) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ThirdAuth) predicate.ThirdAuth {
	return predicate.ThirdAuth(func(s *sql.Selector) {
		p(s.Not())
	})
}
