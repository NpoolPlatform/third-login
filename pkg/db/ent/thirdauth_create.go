// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/third-login-gateway/pkg/db/ent/thirdauth"
	"github.com/google/uuid"
)

// ThirdAuthCreate is the builder for creating a ThirdAuth entity.
type ThirdAuthCreate struct {
	config
	mutation *ThirdAuthMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tac *ThirdAuthCreate) SetCreatedAt(u uint32) *ThirdAuthCreate {
	tac.mutation.SetCreatedAt(u)
	return tac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tac *ThirdAuthCreate) SetNillableCreatedAt(u *uint32) *ThirdAuthCreate {
	if u != nil {
		tac.SetCreatedAt(*u)
	}
	return tac
}

// SetUpdatedAt sets the "updated_at" field.
func (tac *ThirdAuthCreate) SetUpdatedAt(u uint32) *ThirdAuthCreate {
	tac.mutation.SetUpdatedAt(u)
	return tac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tac *ThirdAuthCreate) SetNillableUpdatedAt(u *uint32) *ThirdAuthCreate {
	if u != nil {
		tac.SetUpdatedAt(*u)
	}
	return tac
}

// SetDeletedAt sets the "deleted_at" field.
func (tac *ThirdAuthCreate) SetDeletedAt(u uint32) *ThirdAuthCreate {
	tac.mutation.SetDeletedAt(u)
	return tac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tac *ThirdAuthCreate) SetNillableDeletedAt(u *uint32) *ThirdAuthCreate {
	if u != nil {
		tac.SetDeletedAt(*u)
	}
	return tac
}

// SetAppID sets the "app_id" field.
func (tac *ThirdAuthCreate) SetAppID(u uuid.UUID) *ThirdAuthCreate {
	tac.mutation.SetAppID(u)
	return tac
}

// SetThird sets the "third" field.
func (tac *ThirdAuthCreate) SetThird(s string) *ThirdAuthCreate {
	tac.mutation.SetThird(s)
	return tac
}

// SetLogoURL sets the "logo_url" field.
func (tac *ThirdAuthCreate) SetLogoURL(s string) *ThirdAuthCreate {
	tac.mutation.SetLogoURL(s)
	return tac
}

// SetThirdAppKey sets the "third_app_key" field.
func (tac *ThirdAuthCreate) SetThirdAppKey(s string) *ThirdAuthCreate {
	tac.mutation.SetThirdAppKey(s)
	return tac
}

// SetThirdAppSecret sets the "third_app_secret" field.
func (tac *ThirdAuthCreate) SetThirdAppSecret(s string) *ThirdAuthCreate {
	tac.mutation.SetThirdAppSecret(s)
	return tac
}

// SetRedirectURL sets the "redirect_url" field.
func (tac *ThirdAuthCreate) SetRedirectURL(s string) *ThirdAuthCreate {
	tac.mutation.SetRedirectURL(s)
	return tac
}

// SetID sets the "id" field.
func (tac *ThirdAuthCreate) SetID(u uuid.UUID) *ThirdAuthCreate {
	tac.mutation.SetID(u)
	return tac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tac *ThirdAuthCreate) SetNillableID(u *uuid.UUID) *ThirdAuthCreate {
	if u != nil {
		tac.SetID(*u)
	}
	return tac
}

// Mutation returns the ThirdAuthMutation object of the builder.
func (tac *ThirdAuthCreate) Mutation() *ThirdAuthMutation {
	return tac.mutation
}

// Save creates the ThirdAuth in the database.
func (tac *ThirdAuthCreate) Save(ctx context.Context) (*ThirdAuth, error) {
	var (
		err  error
		node *ThirdAuth
	)
	tac.defaults()
	if len(tac.hooks) == 0 {
		if err = tac.check(); err != nil {
			return nil, err
		}
		node, err = tac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ThirdAuthMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tac.check(); err != nil {
				return nil, err
			}
			tac.mutation = mutation
			if node, err = tac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tac.hooks) - 1; i >= 0; i-- {
			if tac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tac *ThirdAuthCreate) SaveX(ctx context.Context) *ThirdAuth {
	v, err := tac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tac *ThirdAuthCreate) Exec(ctx context.Context) error {
	_, err := tac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tac *ThirdAuthCreate) ExecX(ctx context.Context) {
	if err := tac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tac *ThirdAuthCreate) defaults() {
	if _, ok := tac.mutation.CreatedAt(); !ok {
		v := thirdauth.DefaultCreatedAt()
		tac.mutation.SetCreatedAt(v)
	}
	if _, ok := tac.mutation.UpdatedAt(); !ok {
		v := thirdauth.DefaultUpdatedAt()
		tac.mutation.SetUpdatedAt(v)
	}
	if _, ok := tac.mutation.DeletedAt(); !ok {
		v := thirdauth.DefaultDeletedAt()
		tac.mutation.SetDeletedAt(v)
	}
	if _, ok := tac.mutation.ID(); !ok {
		v := thirdauth.DefaultID()
		tac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tac *ThirdAuthCreate) check() error {
	if _, ok := tac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ThirdAuth.created_at"`)}
	}
	if _, ok := tac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ThirdAuth.updated_at"`)}
	}
	if _, ok := tac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "ThirdAuth.deleted_at"`)}
	}
	if _, ok := tac.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "ThirdAuth.app_id"`)}
	}
	if _, ok := tac.mutation.Third(); !ok {
		return &ValidationError{Name: "third", err: errors.New(`ent: missing required field "ThirdAuth.third"`)}
	}
	if _, ok := tac.mutation.LogoURL(); !ok {
		return &ValidationError{Name: "logo_url", err: errors.New(`ent: missing required field "ThirdAuth.logo_url"`)}
	}
	if _, ok := tac.mutation.ThirdAppKey(); !ok {
		return &ValidationError{Name: "third_app_key", err: errors.New(`ent: missing required field "ThirdAuth.third_app_key"`)}
	}
	if _, ok := tac.mutation.ThirdAppSecret(); !ok {
		return &ValidationError{Name: "third_app_secret", err: errors.New(`ent: missing required field "ThirdAuth.third_app_secret"`)}
	}
	if _, ok := tac.mutation.RedirectURL(); !ok {
		return &ValidationError{Name: "redirect_url", err: errors.New(`ent: missing required field "ThirdAuth.redirect_url"`)}
	}
	return nil
}

func (tac *ThirdAuthCreate) sqlSave(ctx context.Context) (*ThirdAuth, error) {
	_node, _spec := tac.createSpec()
	if err := sqlgraph.CreateNode(ctx, tac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (tac *ThirdAuthCreate) createSpec() (*ThirdAuth, *sqlgraph.CreateSpec) {
	var (
		_node = &ThirdAuth{config: tac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: thirdauth.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: thirdauth.FieldID,
			},
		}
	)
	_spec.OnConflict = tac.conflict
	if id, ok := tac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: thirdauth.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: thirdauth.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: thirdauth.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := tac.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: thirdauth.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := tac.mutation.Third(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: thirdauth.FieldThird,
		})
		_node.Third = value
	}
	if value, ok := tac.mutation.LogoURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: thirdauth.FieldLogoURL,
		})
		_node.LogoURL = value
	}
	if value, ok := tac.mutation.ThirdAppKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: thirdauth.FieldThirdAppKey,
		})
		_node.ThirdAppKey = value
	}
	if value, ok := tac.mutation.ThirdAppSecret(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: thirdauth.FieldThirdAppSecret,
		})
		_node.ThirdAppSecret = value
	}
	if value, ok := tac.mutation.RedirectURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: thirdauth.FieldRedirectURL,
		})
		_node.RedirectURL = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ThirdAuth.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ThirdAuthUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (tac *ThirdAuthCreate) OnConflict(opts ...sql.ConflictOption) *ThirdAuthUpsertOne {
	tac.conflict = opts
	return &ThirdAuthUpsertOne{
		create: tac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ThirdAuth.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tac *ThirdAuthCreate) OnConflictColumns(columns ...string) *ThirdAuthUpsertOne {
	tac.conflict = append(tac.conflict, sql.ConflictColumns(columns...))
	return &ThirdAuthUpsertOne{
		create: tac,
	}
}

type (
	// ThirdAuthUpsertOne is the builder for "upsert"-ing
	//  one ThirdAuth node.
	ThirdAuthUpsertOne struct {
		create *ThirdAuthCreate
	}

	// ThirdAuthUpsert is the "OnConflict" setter.
	ThirdAuthUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *ThirdAuthUpsert) SetCreatedAt(v uint32) *ThirdAuthUpsert {
	u.Set(thirdauth.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ThirdAuthUpsert) UpdateCreatedAt() *ThirdAuthUpsert {
	u.SetExcluded(thirdauth.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ThirdAuthUpsert) AddCreatedAt(v uint32) *ThirdAuthUpsert {
	u.Add(thirdauth.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ThirdAuthUpsert) SetUpdatedAt(v uint32) *ThirdAuthUpsert {
	u.Set(thirdauth.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ThirdAuthUpsert) UpdateUpdatedAt() *ThirdAuthUpsert {
	u.SetExcluded(thirdauth.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ThirdAuthUpsert) AddUpdatedAt(v uint32) *ThirdAuthUpsert {
	u.Add(thirdauth.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ThirdAuthUpsert) SetDeletedAt(v uint32) *ThirdAuthUpsert {
	u.Set(thirdauth.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ThirdAuthUpsert) UpdateDeletedAt() *ThirdAuthUpsert {
	u.SetExcluded(thirdauth.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ThirdAuthUpsert) AddDeletedAt(v uint32) *ThirdAuthUpsert {
	u.Add(thirdauth.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *ThirdAuthUpsert) SetAppID(v uuid.UUID) *ThirdAuthUpsert {
	u.Set(thirdauth.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ThirdAuthUpsert) UpdateAppID() *ThirdAuthUpsert {
	u.SetExcluded(thirdauth.FieldAppID)
	return u
}

// SetThird sets the "third" field.
func (u *ThirdAuthUpsert) SetThird(v string) *ThirdAuthUpsert {
	u.Set(thirdauth.FieldThird, v)
	return u
}

// UpdateThird sets the "third" field to the value that was provided on create.
func (u *ThirdAuthUpsert) UpdateThird() *ThirdAuthUpsert {
	u.SetExcluded(thirdauth.FieldThird)
	return u
}

// SetLogoURL sets the "logo_url" field.
func (u *ThirdAuthUpsert) SetLogoURL(v string) *ThirdAuthUpsert {
	u.Set(thirdauth.FieldLogoURL, v)
	return u
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *ThirdAuthUpsert) UpdateLogoURL() *ThirdAuthUpsert {
	u.SetExcluded(thirdauth.FieldLogoURL)
	return u
}

// SetThirdAppKey sets the "third_app_key" field.
func (u *ThirdAuthUpsert) SetThirdAppKey(v string) *ThirdAuthUpsert {
	u.Set(thirdauth.FieldThirdAppKey, v)
	return u
}

// UpdateThirdAppKey sets the "third_app_key" field to the value that was provided on create.
func (u *ThirdAuthUpsert) UpdateThirdAppKey() *ThirdAuthUpsert {
	u.SetExcluded(thirdauth.FieldThirdAppKey)
	return u
}

// SetThirdAppSecret sets the "third_app_secret" field.
func (u *ThirdAuthUpsert) SetThirdAppSecret(v string) *ThirdAuthUpsert {
	u.Set(thirdauth.FieldThirdAppSecret, v)
	return u
}

// UpdateThirdAppSecret sets the "third_app_secret" field to the value that was provided on create.
func (u *ThirdAuthUpsert) UpdateThirdAppSecret() *ThirdAuthUpsert {
	u.SetExcluded(thirdauth.FieldThirdAppSecret)
	return u
}

// SetRedirectURL sets the "redirect_url" field.
func (u *ThirdAuthUpsert) SetRedirectURL(v string) *ThirdAuthUpsert {
	u.Set(thirdauth.FieldRedirectURL, v)
	return u
}

// UpdateRedirectURL sets the "redirect_url" field to the value that was provided on create.
func (u *ThirdAuthUpsert) UpdateRedirectURL() *ThirdAuthUpsert {
	u.SetExcluded(thirdauth.FieldRedirectURL)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ThirdAuth.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(thirdauth.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ThirdAuthUpsertOne) UpdateNewValues() *ThirdAuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(thirdauth.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.ThirdAuth.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ThirdAuthUpsertOne) Ignore() *ThirdAuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ThirdAuthUpsertOne) DoNothing() *ThirdAuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ThirdAuthCreate.OnConflict
// documentation for more info.
func (u *ThirdAuthUpsertOne) Update(set func(*ThirdAuthUpsert)) *ThirdAuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ThirdAuthUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ThirdAuthUpsertOne) SetCreatedAt(v uint32) *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ThirdAuthUpsertOne) AddCreatedAt(v uint32) *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ThirdAuthUpsertOne) UpdateCreatedAt() *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ThirdAuthUpsertOne) SetUpdatedAt(v uint32) *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ThirdAuthUpsertOne) AddUpdatedAt(v uint32) *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ThirdAuthUpsertOne) UpdateUpdatedAt() *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ThirdAuthUpsertOne) SetDeletedAt(v uint32) *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ThirdAuthUpsertOne) AddDeletedAt(v uint32) *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ThirdAuthUpsertOne) UpdateDeletedAt() *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *ThirdAuthUpsertOne) SetAppID(v uuid.UUID) *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ThirdAuthUpsertOne) UpdateAppID() *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.UpdateAppID()
	})
}

// SetThird sets the "third" field.
func (u *ThirdAuthUpsertOne) SetThird(v string) *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.SetThird(v)
	})
}

// UpdateThird sets the "third" field to the value that was provided on create.
func (u *ThirdAuthUpsertOne) UpdateThird() *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.UpdateThird()
	})
}

// SetLogoURL sets the "logo_url" field.
func (u *ThirdAuthUpsertOne) SetLogoURL(v string) *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.SetLogoURL(v)
	})
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *ThirdAuthUpsertOne) UpdateLogoURL() *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.UpdateLogoURL()
	})
}

// SetThirdAppKey sets the "third_app_key" field.
func (u *ThirdAuthUpsertOne) SetThirdAppKey(v string) *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.SetThirdAppKey(v)
	})
}

// UpdateThirdAppKey sets the "third_app_key" field to the value that was provided on create.
func (u *ThirdAuthUpsertOne) UpdateThirdAppKey() *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.UpdateThirdAppKey()
	})
}

// SetThirdAppSecret sets the "third_app_secret" field.
func (u *ThirdAuthUpsertOne) SetThirdAppSecret(v string) *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.SetThirdAppSecret(v)
	})
}

// UpdateThirdAppSecret sets the "third_app_secret" field to the value that was provided on create.
func (u *ThirdAuthUpsertOne) UpdateThirdAppSecret() *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.UpdateThirdAppSecret()
	})
}

// SetRedirectURL sets the "redirect_url" field.
func (u *ThirdAuthUpsertOne) SetRedirectURL(v string) *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.SetRedirectURL(v)
	})
}

// UpdateRedirectURL sets the "redirect_url" field to the value that was provided on create.
func (u *ThirdAuthUpsertOne) UpdateRedirectURL() *ThirdAuthUpsertOne {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.UpdateRedirectURL()
	})
}

// Exec executes the query.
func (u *ThirdAuthUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ThirdAuthCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ThirdAuthUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ThirdAuthUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ThirdAuthUpsertOne.ID is not supported by MySQL driver. Use ThirdAuthUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ThirdAuthUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ThirdAuthCreateBulk is the builder for creating many ThirdAuth entities in bulk.
type ThirdAuthCreateBulk struct {
	config
	builders []*ThirdAuthCreate
	conflict []sql.ConflictOption
}

// Save creates the ThirdAuth entities in the database.
func (tacb *ThirdAuthCreateBulk) Save(ctx context.Context) ([]*ThirdAuth, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tacb.builders))
	nodes := make([]*ThirdAuth, len(tacb.builders))
	mutators := make([]Mutator, len(tacb.builders))
	for i := range tacb.builders {
		func(i int, root context.Context) {
			builder := tacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ThirdAuthMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tacb *ThirdAuthCreateBulk) SaveX(ctx context.Context) []*ThirdAuth {
	v, err := tacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tacb *ThirdAuthCreateBulk) Exec(ctx context.Context) error {
	_, err := tacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tacb *ThirdAuthCreateBulk) ExecX(ctx context.Context) {
	if err := tacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ThirdAuth.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ThirdAuthUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (tacb *ThirdAuthCreateBulk) OnConflict(opts ...sql.ConflictOption) *ThirdAuthUpsertBulk {
	tacb.conflict = opts
	return &ThirdAuthUpsertBulk{
		create: tacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ThirdAuth.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tacb *ThirdAuthCreateBulk) OnConflictColumns(columns ...string) *ThirdAuthUpsertBulk {
	tacb.conflict = append(tacb.conflict, sql.ConflictColumns(columns...))
	return &ThirdAuthUpsertBulk{
		create: tacb,
	}
}

// ThirdAuthUpsertBulk is the builder for "upsert"-ing
// a bulk of ThirdAuth nodes.
type ThirdAuthUpsertBulk struct {
	create *ThirdAuthCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ThirdAuth.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(thirdauth.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ThirdAuthUpsertBulk) UpdateNewValues() *ThirdAuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(thirdauth.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ThirdAuth.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ThirdAuthUpsertBulk) Ignore() *ThirdAuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ThirdAuthUpsertBulk) DoNothing() *ThirdAuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ThirdAuthCreateBulk.OnConflict
// documentation for more info.
func (u *ThirdAuthUpsertBulk) Update(set func(*ThirdAuthUpsert)) *ThirdAuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ThirdAuthUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ThirdAuthUpsertBulk) SetCreatedAt(v uint32) *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ThirdAuthUpsertBulk) AddCreatedAt(v uint32) *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ThirdAuthUpsertBulk) UpdateCreatedAt() *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ThirdAuthUpsertBulk) SetUpdatedAt(v uint32) *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ThirdAuthUpsertBulk) AddUpdatedAt(v uint32) *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ThirdAuthUpsertBulk) UpdateUpdatedAt() *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ThirdAuthUpsertBulk) SetDeletedAt(v uint32) *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ThirdAuthUpsertBulk) AddDeletedAt(v uint32) *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ThirdAuthUpsertBulk) UpdateDeletedAt() *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *ThirdAuthUpsertBulk) SetAppID(v uuid.UUID) *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ThirdAuthUpsertBulk) UpdateAppID() *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.UpdateAppID()
	})
}

// SetThird sets the "third" field.
func (u *ThirdAuthUpsertBulk) SetThird(v string) *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.SetThird(v)
	})
}

// UpdateThird sets the "third" field to the value that was provided on create.
func (u *ThirdAuthUpsertBulk) UpdateThird() *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.UpdateThird()
	})
}

// SetLogoURL sets the "logo_url" field.
func (u *ThirdAuthUpsertBulk) SetLogoURL(v string) *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.SetLogoURL(v)
	})
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *ThirdAuthUpsertBulk) UpdateLogoURL() *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.UpdateLogoURL()
	})
}

// SetThirdAppKey sets the "third_app_key" field.
func (u *ThirdAuthUpsertBulk) SetThirdAppKey(v string) *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.SetThirdAppKey(v)
	})
}

// UpdateThirdAppKey sets the "third_app_key" field to the value that was provided on create.
func (u *ThirdAuthUpsertBulk) UpdateThirdAppKey() *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.UpdateThirdAppKey()
	})
}

// SetThirdAppSecret sets the "third_app_secret" field.
func (u *ThirdAuthUpsertBulk) SetThirdAppSecret(v string) *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.SetThirdAppSecret(v)
	})
}

// UpdateThirdAppSecret sets the "third_app_secret" field to the value that was provided on create.
func (u *ThirdAuthUpsertBulk) UpdateThirdAppSecret() *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.UpdateThirdAppSecret()
	})
}

// SetRedirectURL sets the "redirect_url" field.
func (u *ThirdAuthUpsertBulk) SetRedirectURL(v string) *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.SetRedirectURL(v)
	})
}

// UpdateRedirectURL sets the "redirect_url" field to the value that was provided on create.
func (u *ThirdAuthUpsertBulk) UpdateRedirectURL() *ThirdAuthUpsertBulk {
	return u.Update(func(s *ThirdAuthUpsert) {
		s.UpdateRedirectURL()
	})
}

// Exec executes the query.
func (u *ThirdAuthUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ThirdAuthCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ThirdAuthCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ThirdAuthUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
