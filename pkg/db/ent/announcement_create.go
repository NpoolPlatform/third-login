// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notification/pkg/db/ent/announcement"
	"github.com/google/uuid"
)

// AnnouncementCreate is the builder for creating a Announcement entity.
type AnnouncementCreate struct {
	config
	mutation *AnnouncementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (ac *AnnouncementCreate) SetAppID(u uuid.UUID) *AnnouncementCreate {
	ac.mutation.SetAppID(u)
	return ac
}

// SetTitle sets the "title" field.
func (ac *AnnouncementCreate) SetTitle(s string) *AnnouncementCreate {
	ac.mutation.SetTitle(s)
	return ac
}

// SetContent sets the "content" field.
func (ac *AnnouncementCreate) SetContent(s string) *AnnouncementCreate {
	ac.mutation.SetContent(s)
	return ac
}

// SetCreateAt sets the "create_at" field.
func (ac *AnnouncementCreate) SetCreateAt(u uint32) *AnnouncementCreate {
	ac.mutation.SetCreateAt(u)
	return ac
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ac *AnnouncementCreate) SetNillableCreateAt(u *uint32) *AnnouncementCreate {
	if u != nil {
		ac.SetCreateAt(*u)
	}
	return ac
}

// SetUpdateAt sets the "update_at" field.
func (ac *AnnouncementCreate) SetUpdateAt(u uint32) *AnnouncementCreate {
	ac.mutation.SetUpdateAt(u)
	return ac
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ac *AnnouncementCreate) SetNillableUpdateAt(u *uint32) *AnnouncementCreate {
	if u != nil {
		ac.SetUpdateAt(*u)
	}
	return ac
}

// SetDeleteAt sets the "delete_at" field.
func (ac *AnnouncementCreate) SetDeleteAt(u uint32) *AnnouncementCreate {
	ac.mutation.SetDeleteAt(u)
	return ac
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (ac *AnnouncementCreate) SetNillableDeleteAt(u *uint32) *AnnouncementCreate {
	if u != nil {
		ac.SetDeleteAt(*u)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AnnouncementCreate) SetID(u uuid.UUID) *AnnouncementCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AnnouncementCreate) SetNillableID(u *uuid.UUID) *AnnouncementCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// Mutation returns the AnnouncementMutation object of the builder.
func (ac *AnnouncementCreate) Mutation() *AnnouncementMutation {
	return ac.mutation
}

// Save creates the Announcement in the database.
func (ac *AnnouncementCreate) Save(ctx context.Context) (*Announcement, error) {
	var (
		err  error
		node *Announcement
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnnouncementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AnnouncementCreate) SaveX(ctx context.Context) *Announcement {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AnnouncementCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AnnouncementCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AnnouncementCreate) defaults() {
	if _, ok := ac.mutation.CreateAt(); !ok {
		v := announcement.DefaultCreateAt()
		ac.mutation.SetCreateAt(v)
	}
	if _, ok := ac.mutation.UpdateAt(); !ok {
		v := announcement.DefaultUpdateAt()
		ac.mutation.SetUpdateAt(v)
	}
	if _, ok := ac.mutation.DeleteAt(); !ok {
		v := announcement.DefaultDeleteAt()
		ac.mutation.SetDeleteAt(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := announcement.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AnnouncementCreate) check() error {
	if _, ok := ac.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "Announcement.app_id"`)}
	}
	if _, ok := ac.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Announcement.title"`)}
	}
	if _, ok := ac.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Announcement.content"`)}
	}
	if _, ok := ac.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "Announcement.create_at"`)}
	}
	if _, ok := ac.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "Announcement.update_at"`)}
	}
	if _, ok := ac.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "Announcement.delete_at"`)}
	}
	return nil
}

func (ac *AnnouncementCreate) sqlSave(ctx context.Context) (*Announcement, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ac *AnnouncementCreate) createSpec() (*Announcement, *sqlgraph.CreateSpec) {
	var (
		_node = &Announcement{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: announcement.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: announcement.FieldID,
			},
		}
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: announcement.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := ac.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announcement.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := ac.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announcement.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := ac.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: announcement.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := ac.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: announcement.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := ac.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: announcement.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Announcement.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AnnouncementUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (ac *AnnouncementCreate) OnConflict(opts ...sql.ConflictOption) *AnnouncementUpsertOne {
	ac.conflict = opts
	return &AnnouncementUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Announcement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ac *AnnouncementCreate) OnConflictColumns(columns ...string) *AnnouncementUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AnnouncementUpsertOne{
		create: ac,
	}
}

type (
	// AnnouncementUpsertOne is the builder for "upsert"-ing
	//  one Announcement node.
	AnnouncementUpsertOne struct {
		create *AnnouncementCreate
	}

	// AnnouncementUpsert is the "OnConflict" setter.
	AnnouncementUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *AnnouncementUpsert) SetAppID(v uuid.UUID) *AnnouncementUpsert {
	u.Set(announcement.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AnnouncementUpsert) UpdateAppID() *AnnouncementUpsert {
	u.SetExcluded(announcement.FieldAppID)
	return u
}

// SetTitle sets the "title" field.
func (u *AnnouncementUpsert) SetTitle(v string) *AnnouncementUpsert {
	u.Set(announcement.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AnnouncementUpsert) UpdateTitle() *AnnouncementUpsert {
	u.SetExcluded(announcement.FieldTitle)
	return u
}

// SetContent sets the "content" field.
func (u *AnnouncementUpsert) SetContent(v string) *AnnouncementUpsert {
	u.Set(announcement.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *AnnouncementUpsert) UpdateContent() *AnnouncementUpsert {
	u.SetExcluded(announcement.FieldContent)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *AnnouncementUpsert) SetCreateAt(v uint32) *AnnouncementUpsert {
	u.Set(announcement.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AnnouncementUpsert) UpdateCreateAt() *AnnouncementUpsert {
	u.SetExcluded(announcement.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *AnnouncementUpsert) AddCreateAt(v uint32) *AnnouncementUpsert {
	u.Add(announcement.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *AnnouncementUpsert) SetUpdateAt(v uint32) *AnnouncementUpsert {
	u.Set(announcement.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AnnouncementUpsert) UpdateUpdateAt() *AnnouncementUpsert {
	u.SetExcluded(announcement.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AnnouncementUpsert) AddUpdateAt(v uint32) *AnnouncementUpsert {
	u.Add(announcement.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *AnnouncementUpsert) SetDeleteAt(v uint32) *AnnouncementUpsert {
	u.Set(announcement.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AnnouncementUpsert) UpdateDeleteAt() *AnnouncementUpsert {
	u.SetExcluded(announcement.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AnnouncementUpsert) AddDeleteAt(v uint32) *AnnouncementUpsert {
	u.Add(announcement.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Announcement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(announcement.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AnnouncementUpsertOne) UpdateNewValues() *AnnouncementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(announcement.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Announcement.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AnnouncementUpsertOne) Ignore() *AnnouncementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AnnouncementUpsertOne) DoNothing() *AnnouncementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AnnouncementCreate.OnConflict
// documentation for more info.
func (u *AnnouncementUpsertOne) Update(set func(*AnnouncementUpsert)) *AnnouncementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AnnouncementUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AnnouncementUpsertOne) SetAppID(v uuid.UUID) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AnnouncementUpsertOne) UpdateAppID() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateAppID()
	})
}

// SetTitle sets the "title" field.
func (u *AnnouncementUpsertOne) SetTitle(v string) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AnnouncementUpsertOne) UpdateTitle() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateTitle()
	})
}

// SetContent sets the "content" field.
func (u *AnnouncementUpsertOne) SetContent(v string) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *AnnouncementUpsertOne) UpdateContent() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateContent()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AnnouncementUpsertOne) SetCreateAt(v uint32) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AnnouncementUpsertOne) AddCreateAt(v uint32) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AnnouncementUpsertOne) UpdateCreateAt() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AnnouncementUpsertOne) SetUpdateAt(v uint32) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AnnouncementUpsertOne) AddUpdateAt(v uint32) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AnnouncementUpsertOne) UpdateUpdateAt() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AnnouncementUpsertOne) SetDeleteAt(v uint32) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AnnouncementUpsertOne) AddDeleteAt(v uint32) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AnnouncementUpsertOne) UpdateDeleteAt() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AnnouncementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AnnouncementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AnnouncementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AnnouncementUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AnnouncementUpsertOne.ID is not supported by MySQL driver. Use AnnouncementUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AnnouncementUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AnnouncementCreateBulk is the builder for creating many Announcement entities in bulk.
type AnnouncementCreateBulk struct {
	config
	builders []*AnnouncementCreate
	conflict []sql.ConflictOption
}

// Save creates the Announcement entities in the database.
func (acb *AnnouncementCreateBulk) Save(ctx context.Context) ([]*Announcement, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Announcement, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AnnouncementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AnnouncementCreateBulk) SaveX(ctx context.Context) []*Announcement {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AnnouncementCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AnnouncementCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Announcement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AnnouncementUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (acb *AnnouncementCreateBulk) OnConflict(opts ...sql.ConflictOption) *AnnouncementUpsertBulk {
	acb.conflict = opts
	return &AnnouncementUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Announcement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acb *AnnouncementCreateBulk) OnConflictColumns(columns ...string) *AnnouncementUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AnnouncementUpsertBulk{
		create: acb,
	}
}

// AnnouncementUpsertBulk is the builder for "upsert"-ing
// a bulk of Announcement nodes.
type AnnouncementUpsertBulk struct {
	create *AnnouncementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Announcement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(announcement.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AnnouncementUpsertBulk) UpdateNewValues() *AnnouncementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(announcement.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Announcement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AnnouncementUpsertBulk) Ignore() *AnnouncementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AnnouncementUpsertBulk) DoNothing() *AnnouncementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AnnouncementCreateBulk.OnConflict
// documentation for more info.
func (u *AnnouncementUpsertBulk) Update(set func(*AnnouncementUpsert)) *AnnouncementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AnnouncementUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AnnouncementUpsertBulk) SetAppID(v uuid.UUID) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AnnouncementUpsertBulk) UpdateAppID() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateAppID()
	})
}

// SetTitle sets the "title" field.
func (u *AnnouncementUpsertBulk) SetTitle(v string) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AnnouncementUpsertBulk) UpdateTitle() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateTitle()
	})
}

// SetContent sets the "content" field.
func (u *AnnouncementUpsertBulk) SetContent(v string) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *AnnouncementUpsertBulk) UpdateContent() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateContent()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AnnouncementUpsertBulk) SetCreateAt(v uint32) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AnnouncementUpsertBulk) AddCreateAt(v uint32) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AnnouncementUpsertBulk) UpdateCreateAt() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AnnouncementUpsertBulk) SetUpdateAt(v uint32) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AnnouncementUpsertBulk) AddUpdateAt(v uint32) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AnnouncementUpsertBulk) UpdateUpdateAt() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AnnouncementUpsertBulk) SetDeleteAt(v uint32) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AnnouncementUpsertBulk) AddDeleteAt(v uint32) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AnnouncementUpsertBulk) UpdateDeleteAt() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AnnouncementUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AnnouncementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AnnouncementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AnnouncementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
