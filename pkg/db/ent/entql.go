// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/third-login-gateway/pkg/db/ent/platform"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   platform.Table,
			Columns: platform.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: platform.FieldID,
			},
		},
		Type: "Platform",
		Fields: map[string]*sqlgraph.FieldSpec{
			platform.FieldCreatedAt:         {Type: field.TypeUint32, Column: platform.FieldCreatedAt},
			platform.FieldUpdatedAt:         {Type: field.TypeUint32, Column: platform.FieldUpdatedAt},
			platform.FieldDeletedAt:         {Type: field.TypeUint32, Column: platform.FieldDeletedAt},
			platform.FieldAppID:             {Type: field.TypeUUID, Column: platform.FieldAppID},
			platform.FieldPlatform:          {Type: field.TypeString, Column: platform.FieldPlatform},
			platform.FieldPlatformAuthURL:   {Type: field.TypeString, Column: platform.FieldPlatformAuthURL},
			platform.FieldLogoURL:           {Type: field.TypeString, Column: platform.FieldLogoURL},
			platform.FieldPlatformAppKey:    {Type: field.TypeString, Column: platform.FieldPlatformAppKey},
			platform.FieldPlatformAppSecret: {Type: field.TypeString, Column: platform.FieldPlatformAppSecret},
			platform.FieldRedirectURL:       {Type: field.TypeString, Column: platform.FieldRedirectURL},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (pq *PlatformQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PlatformQuery builder.
func (pq *PlatformQuery) Filter() *PlatformFilter {
	return &PlatformFilter{pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PlatformMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PlatformMutation builder.
func (m *PlatformMutation) Filter() *PlatformFilter {
	return &PlatformFilter{m}
}

// PlatformFilter provides a generic filtering capability at runtime for PlatformQuery.
type PlatformFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *PlatformFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *PlatformFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(platform.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *PlatformFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(platform.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *PlatformFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(platform.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *PlatformFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(platform.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *PlatformFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(platform.FieldAppID))
}

// WherePlatform applies the entql string predicate on the platform field.
func (f *PlatformFilter) WherePlatform(p entql.StringP) {
	f.Where(p.Field(platform.FieldPlatform))
}

// WherePlatformAuthURL applies the entql string predicate on the platform_auth_url field.
func (f *PlatformFilter) WherePlatformAuthURL(p entql.StringP) {
	f.Where(p.Field(platform.FieldPlatformAuthURL))
}

// WhereLogoURL applies the entql string predicate on the logo_url field.
func (f *PlatformFilter) WhereLogoURL(p entql.StringP) {
	f.Where(p.Field(platform.FieldLogoURL))
}

// WherePlatformAppKey applies the entql string predicate on the platform_app_key field.
func (f *PlatformFilter) WherePlatformAppKey(p entql.StringP) {
	f.Where(p.Field(platform.FieldPlatformAppKey))
}

// WherePlatformAppSecret applies the entql string predicate on the platform_app_secret field.
func (f *PlatformFilter) WherePlatformAppSecret(p entql.StringP) {
	f.Where(p.Field(platform.FieldPlatformAppSecret))
}

// WhereRedirectURL applies the entql string predicate on the redirect_url field.
func (f *PlatformFilter) WhereRedirectURL(p entql.StringP) {
	f.Where(p.Field(platform.FieldRedirectURL))
}
