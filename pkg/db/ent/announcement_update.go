// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notification/pkg/db/ent/announcement"
	"github.com/NpoolPlatform/notification/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AnnouncementUpdate is the builder for updating Announcement entities.
type AnnouncementUpdate struct {
	config
	hooks    []Hook
	mutation *AnnouncementMutation
}

// Where appends a list predicates to the AnnouncementUpdate builder.
func (au *AnnouncementUpdate) Where(ps ...predicate.Announcement) *AnnouncementUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetAppID sets the "app_id" field.
func (au *AnnouncementUpdate) SetAppID(u uuid.UUID) *AnnouncementUpdate {
	au.mutation.SetAppID(u)
	return au
}

// SetTitle sets the "title" field.
func (au *AnnouncementUpdate) SetTitle(s string) *AnnouncementUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetContent sets the "content" field.
func (au *AnnouncementUpdate) SetContent(s string) *AnnouncementUpdate {
	au.mutation.SetContent(s)
	return au
}

// SetCreateAt sets the "create_at" field.
func (au *AnnouncementUpdate) SetCreateAt(u uint32) *AnnouncementUpdate {
	au.mutation.ResetCreateAt()
	au.mutation.SetCreateAt(u)
	return au
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (au *AnnouncementUpdate) SetNillableCreateAt(u *uint32) *AnnouncementUpdate {
	if u != nil {
		au.SetCreateAt(*u)
	}
	return au
}

// AddCreateAt adds u to the "create_at" field.
func (au *AnnouncementUpdate) AddCreateAt(u int32) *AnnouncementUpdate {
	au.mutation.AddCreateAt(u)
	return au
}

// SetUpdateAt sets the "update_at" field.
func (au *AnnouncementUpdate) SetUpdateAt(u uint32) *AnnouncementUpdate {
	au.mutation.ResetUpdateAt()
	au.mutation.SetUpdateAt(u)
	return au
}

// AddUpdateAt adds u to the "update_at" field.
func (au *AnnouncementUpdate) AddUpdateAt(u int32) *AnnouncementUpdate {
	au.mutation.AddUpdateAt(u)
	return au
}

// SetDeleteAt sets the "delete_at" field.
func (au *AnnouncementUpdate) SetDeleteAt(u uint32) *AnnouncementUpdate {
	au.mutation.ResetDeleteAt()
	au.mutation.SetDeleteAt(u)
	return au
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (au *AnnouncementUpdate) SetNillableDeleteAt(u *uint32) *AnnouncementUpdate {
	if u != nil {
		au.SetDeleteAt(*u)
	}
	return au
}

// AddDeleteAt adds u to the "delete_at" field.
func (au *AnnouncementUpdate) AddDeleteAt(u int32) *AnnouncementUpdate {
	au.mutation.AddDeleteAt(u)
	return au
}

// Mutation returns the AnnouncementMutation object of the builder.
func (au *AnnouncementUpdate) Mutation() *AnnouncementMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AnnouncementUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnnouncementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AnnouncementUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AnnouncementUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AnnouncementUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AnnouncementUpdate) defaults() {
	if _, ok := au.mutation.UpdateAt(); !ok {
		v := announcement.UpdateDefaultUpdateAt()
		au.mutation.SetUpdateAt(v)
	}
}

func (au *AnnouncementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   announcement.Table,
			Columns: announcement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: announcement.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: announcement.FieldAppID,
		})
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announcement.FieldTitle,
		})
	}
	if value, ok := au.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announcement.FieldContent,
		})
	}
	if value, ok := au.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: announcement.FieldCreateAt,
		})
	}
	if value, ok := au.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: announcement.FieldCreateAt,
		})
	}
	if value, ok := au.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: announcement.FieldUpdateAt,
		})
	}
	if value, ok := au.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: announcement.FieldUpdateAt,
		})
	}
	if value, ok := au.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: announcement.FieldDeleteAt,
		})
	}
	if value, ok := au.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: announcement.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{announcement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AnnouncementUpdateOne is the builder for updating a single Announcement entity.
type AnnouncementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnnouncementMutation
}

// SetAppID sets the "app_id" field.
func (auo *AnnouncementUpdateOne) SetAppID(u uuid.UUID) *AnnouncementUpdateOne {
	auo.mutation.SetAppID(u)
	return auo
}

// SetTitle sets the "title" field.
func (auo *AnnouncementUpdateOne) SetTitle(s string) *AnnouncementUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetContent sets the "content" field.
func (auo *AnnouncementUpdateOne) SetContent(s string) *AnnouncementUpdateOne {
	auo.mutation.SetContent(s)
	return auo
}

// SetCreateAt sets the "create_at" field.
func (auo *AnnouncementUpdateOne) SetCreateAt(u uint32) *AnnouncementUpdateOne {
	auo.mutation.ResetCreateAt()
	auo.mutation.SetCreateAt(u)
	return auo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (auo *AnnouncementUpdateOne) SetNillableCreateAt(u *uint32) *AnnouncementUpdateOne {
	if u != nil {
		auo.SetCreateAt(*u)
	}
	return auo
}

// AddCreateAt adds u to the "create_at" field.
func (auo *AnnouncementUpdateOne) AddCreateAt(u int32) *AnnouncementUpdateOne {
	auo.mutation.AddCreateAt(u)
	return auo
}

// SetUpdateAt sets the "update_at" field.
func (auo *AnnouncementUpdateOne) SetUpdateAt(u uint32) *AnnouncementUpdateOne {
	auo.mutation.ResetUpdateAt()
	auo.mutation.SetUpdateAt(u)
	return auo
}

// AddUpdateAt adds u to the "update_at" field.
func (auo *AnnouncementUpdateOne) AddUpdateAt(u int32) *AnnouncementUpdateOne {
	auo.mutation.AddUpdateAt(u)
	return auo
}

// SetDeleteAt sets the "delete_at" field.
func (auo *AnnouncementUpdateOne) SetDeleteAt(u uint32) *AnnouncementUpdateOne {
	auo.mutation.ResetDeleteAt()
	auo.mutation.SetDeleteAt(u)
	return auo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (auo *AnnouncementUpdateOne) SetNillableDeleteAt(u *uint32) *AnnouncementUpdateOne {
	if u != nil {
		auo.SetDeleteAt(*u)
	}
	return auo
}

// AddDeleteAt adds u to the "delete_at" field.
func (auo *AnnouncementUpdateOne) AddDeleteAt(u int32) *AnnouncementUpdateOne {
	auo.mutation.AddDeleteAt(u)
	return auo
}

// Mutation returns the AnnouncementMutation object of the builder.
func (auo *AnnouncementUpdateOne) Mutation() *AnnouncementMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AnnouncementUpdateOne) Select(field string, fields ...string) *AnnouncementUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Announcement entity.
func (auo *AnnouncementUpdateOne) Save(ctx context.Context) (*Announcement, error) {
	var (
		err  error
		node *Announcement
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnnouncementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AnnouncementUpdateOne) SaveX(ctx context.Context) *Announcement {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AnnouncementUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AnnouncementUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AnnouncementUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdateAt(); !ok {
		v := announcement.UpdateDefaultUpdateAt()
		auo.mutation.SetUpdateAt(v)
	}
}

func (auo *AnnouncementUpdateOne) sqlSave(ctx context.Context) (_node *Announcement, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   announcement.Table,
			Columns: announcement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: announcement.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Announcement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, announcement.FieldID)
		for _, f := range fields {
			if !announcement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != announcement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: announcement.FieldAppID,
		})
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announcement.FieldTitle,
		})
	}
	if value, ok := auo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announcement.FieldContent,
		})
	}
	if value, ok := auo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: announcement.FieldCreateAt,
		})
	}
	if value, ok := auo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: announcement.FieldCreateAt,
		})
	}
	if value, ok := auo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: announcement.FieldUpdateAt,
		})
	}
	if value, ok := auo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: announcement.FieldUpdateAt,
		})
	}
	if value, ok := auo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: announcement.FieldDeleteAt,
		})
	}
	if value, ok := auo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: announcement.FieldDeleteAt,
		})
	}
	_node = &Announcement{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{announcement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
