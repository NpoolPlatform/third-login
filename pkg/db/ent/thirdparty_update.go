// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/third-login-gateway/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/third-login-gateway/pkg/db/ent/thirdparty"
)

// ThirdPartyUpdate is the builder for updating ThirdParty entities.
type ThirdPartyUpdate struct {
	config
	hooks    []Hook
	mutation *ThirdPartyMutation
}

// Where appends a list predicates to the ThirdPartyUpdate builder.
func (tpu *ThirdPartyUpdate) Where(ps ...predicate.ThirdParty) *ThirdPartyUpdate {
	tpu.mutation.Where(ps...)
	return tpu
}

// SetCreatedAt sets the "created_at" field.
func (tpu *ThirdPartyUpdate) SetCreatedAt(u uint32) *ThirdPartyUpdate {
	tpu.mutation.ResetCreatedAt()
	tpu.mutation.SetCreatedAt(u)
	return tpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tpu *ThirdPartyUpdate) SetNillableCreatedAt(u *uint32) *ThirdPartyUpdate {
	if u != nil {
		tpu.SetCreatedAt(*u)
	}
	return tpu
}

// AddCreatedAt adds u to the "created_at" field.
func (tpu *ThirdPartyUpdate) AddCreatedAt(u int32) *ThirdPartyUpdate {
	tpu.mutation.AddCreatedAt(u)
	return tpu
}

// SetUpdatedAt sets the "updated_at" field.
func (tpu *ThirdPartyUpdate) SetUpdatedAt(u uint32) *ThirdPartyUpdate {
	tpu.mutation.ResetUpdatedAt()
	tpu.mutation.SetUpdatedAt(u)
	return tpu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tpu *ThirdPartyUpdate) AddUpdatedAt(u int32) *ThirdPartyUpdate {
	tpu.mutation.AddUpdatedAt(u)
	return tpu
}

// SetDeletedAt sets the "deleted_at" field.
func (tpu *ThirdPartyUpdate) SetDeletedAt(u uint32) *ThirdPartyUpdate {
	tpu.mutation.ResetDeletedAt()
	tpu.mutation.SetDeletedAt(u)
	return tpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tpu *ThirdPartyUpdate) SetNillableDeletedAt(u *uint32) *ThirdPartyUpdate {
	if u != nil {
		tpu.SetDeletedAt(*u)
	}
	return tpu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tpu *ThirdPartyUpdate) AddDeletedAt(u int32) *ThirdPartyUpdate {
	tpu.mutation.AddDeletedAt(u)
	return tpu
}

// SetBrandName sets the "brand_name" field.
func (tpu *ThirdPartyUpdate) SetBrandName(s string) *ThirdPartyUpdate {
	tpu.mutation.SetBrandName(s)
	return tpu
}

// SetLogo sets the "logo" field.
func (tpu *ThirdPartyUpdate) SetLogo(s string) *ThirdPartyUpdate {
	tpu.mutation.SetLogo(s)
	return tpu
}

// SetDomain sets the "domain" field.
func (tpu *ThirdPartyUpdate) SetDomain(s string) *ThirdPartyUpdate {
	tpu.mutation.SetDomain(s)
	return tpu
}

// Mutation returns the ThirdPartyMutation object of the builder.
func (tpu *ThirdPartyUpdate) Mutation() *ThirdPartyMutation {
	return tpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tpu *ThirdPartyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := tpu.defaults(); err != nil {
		return 0, err
	}
	if len(tpu.hooks) == 0 {
		affected, err = tpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ThirdPartyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tpu.mutation = mutation
			affected, err = tpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tpu.hooks) - 1; i >= 0; i-- {
			if tpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tpu *ThirdPartyUpdate) SaveX(ctx context.Context) int {
	affected, err := tpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tpu *ThirdPartyUpdate) Exec(ctx context.Context) error {
	_, err := tpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpu *ThirdPartyUpdate) ExecX(ctx context.Context) {
	if err := tpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpu *ThirdPartyUpdate) defaults() error {
	if _, ok := tpu.mutation.UpdatedAt(); !ok {
		if thirdparty.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized thirdparty.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := thirdparty.UpdateDefaultUpdatedAt()
		tpu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (tpu *ThirdPartyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   thirdparty.Table,
			Columns: thirdparty.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: thirdparty.FieldID,
			},
		},
	}
	if ps := tpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: thirdparty.FieldCreatedAt,
		})
	}
	if value, ok := tpu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: thirdparty.FieldCreatedAt,
		})
	}
	if value, ok := tpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: thirdparty.FieldUpdatedAt,
		})
	}
	if value, ok := tpu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: thirdparty.FieldUpdatedAt,
		})
	}
	if value, ok := tpu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: thirdparty.FieldDeletedAt,
		})
	}
	if value, ok := tpu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: thirdparty.FieldDeletedAt,
		})
	}
	if value, ok := tpu.mutation.BrandName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: thirdparty.FieldBrandName,
		})
	}
	if value, ok := tpu.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: thirdparty.FieldLogo,
		})
	}
	if value, ok := tpu.mutation.Domain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: thirdparty.FieldDomain,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{thirdparty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ThirdPartyUpdateOne is the builder for updating a single ThirdParty entity.
type ThirdPartyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ThirdPartyMutation
}

// SetCreatedAt sets the "created_at" field.
func (tpuo *ThirdPartyUpdateOne) SetCreatedAt(u uint32) *ThirdPartyUpdateOne {
	tpuo.mutation.ResetCreatedAt()
	tpuo.mutation.SetCreatedAt(u)
	return tpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tpuo *ThirdPartyUpdateOne) SetNillableCreatedAt(u *uint32) *ThirdPartyUpdateOne {
	if u != nil {
		tpuo.SetCreatedAt(*u)
	}
	return tpuo
}

// AddCreatedAt adds u to the "created_at" field.
func (tpuo *ThirdPartyUpdateOne) AddCreatedAt(u int32) *ThirdPartyUpdateOne {
	tpuo.mutation.AddCreatedAt(u)
	return tpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tpuo *ThirdPartyUpdateOne) SetUpdatedAt(u uint32) *ThirdPartyUpdateOne {
	tpuo.mutation.ResetUpdatedAt()
	tpuo.mutation.SetUpdatedAt(u)
	return tpuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tpuo *ThirdPartyUpdateOne) AddUpdatedAt(u int32) *ThirdPartyUpdateOne {
	tpuo.mutation.AddUpdatedAt(u)
	return tpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tpuo *ThirdPartyUpdateOne) SetDeletedAt(u uint32) *ThirdPartyUpdateOne {
	tpuo.mutation.ResetDeletedAt()
	tpuo.mutation.SetDeletedAt(u)
	return tpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tpuo *ThirdPartyUpdateOne) SetNillableDeletedAt(u *uint32) *ThirdPartyUpdateOne {
	if u != nil {
		tpuo.SetDeletedAt(*u)
	}
	return tpuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tpuo *ThirdPartyUpdateOne) AddDeletedAt(u int32) *ThirdPartyUpdateOne {
	tpuo.mutation.AddDeletedAt(u)
	return tpuo
}

// SetBrandName sets the "brand_name" field.
func (tpuo *ThirdPartyUpdateOne) SetBrandName(s string) *ThirdPartyUpdateOne {
	tpuo.mutation.SetBrandName(s)
	return tpuo
}

// SetLogo sets the "logo" field.
func (tpuo *ThirdPartyUpdateOne) SetLogo(s string) *ThirdPartyUpdateOne {
	tpuo.mutation.SetLogo(s)
	return tpuo
}

// SetDomain sets the "domain" field.
func (tpuo *ThirdPartyUpdateOne) SetDomain(s string) *ThirdPartyUpdateOne {
	tpuo.mutation.SetDomain(s)
	return tpuo
}

// Mutation returns the ThirdPartyMutation object of the builder.
func (tpuo *ThirdPartyUpdateOne) Mutation() *ThirdPartyMutation {
	return tpuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tpuo *ThirdPartyUpdateOne) Select(field string, fields ...string) *ThirdPartyUpdateOne {
	tpuo.fields = append([]string{field}, fields...)
	return tpuo
}

// Save executes the query and returns the updated ThirdParty entity.
func (tpuo *ThirdPartyUpdateOne) Save(ctx context.Context) (*ThirdParty, error) {
	var (
		err  error
		node *ThirdParty
	)
	if err := tpuo.defaults(); err != nil {
		return nil, err
	}
	if len(tpuo.hooks) == 0 {
		node, err = tpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ThirdPartyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tpuo.mutation = mutation
			node, err = tpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tpuo.hooks) - 1; i >= 0; i-- {
			if tpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tpuo *ThirdPartyUpdateOne) SaveX(ctx context.Context) *ThirdParty {
	node, err := tpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tpuo *ThirdPartyUpdateOne) Exec(ctx context.Context) error {
	_, err := tpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpuo *ThirdPartyUpdateOne) ExecX(ctx context.Context) {
	if err := tpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpuo *ThirdPartyUpdateOne) defaults() error {
	if _, ok := tpuo.mutation.UpdatedAt(); !ok {
		if thirdparty.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized thirdparty.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := thirdparty.UpdateDefaultUpdatedAt()
		tpuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (tpuo *ThirdPartyUpdateOne) sqlSave(ctx context.Context) (_node *ThirdParty, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   thirdparty.Table,
			Columns: thirdparty.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: thirdparty.FieldID,
			},
		},
	}
	id, ok := tpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ThirdParty.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, thirdparty.FieldID)
		for _, f := range fields {
			if !thirdparty.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != thirdparty.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: thirdparty.FieldCreatedAt,
		})
	}
	if value, ok := tpuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: thirdparty.FieldCreatedAt,
		})
	}
	if value, ok := tpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: thirdparty.FieldUpdatedAt,
		})
	}
	if value, ok := tpuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: thirdparty.FieldUpdatedAt,
		})
	}
	if value, ok := tpuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: thirdparty.FieldDeletedAt,
		})
	}
	if value, ok := tpuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: thirdparty.FieldDeletedAt,
		})
	}
	if value, ok := tpuo.mutation.BrandName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: thirdparty.FieldBrandName,
		})
	}
	if value, ok := tpuo.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: thirdparty.FieldLogo,
		})
	}
	if value, ok := tpuo.mutation.Domain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: thirdparty.FieldDomain,
		})
	}
	_node = &ThirdParty{config: tpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{thirdparty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
