// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notification/pkg/db/ent/mailbox"
	"github.com/google/uuid"
)

// MailBoxCreate is the builder for creating a MailBox entity.
type MailBoxCreate struct {
	config
	mutation *MailBoxMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (mbc *MailBoxCreate) SetAppID(u uuid.UUID) *MailBoxCreate {
	mbc.mutation.SetAppID(u)
	return mbc
}

// SetFromUserID sets the "from_user_id" field.
func (mbc *MailBoxCreate) SetFromUserID(u uuid.UUID) *MailBoxCreate {
	mbc.mutation.SetFromUserID(u)
	return mbc
}

// SetToUserID sets the "to_user_id" field.
func (mbc *MailBoxCreate) SetToUserID(u uuid.UUID) *MailBoxCreate {
	mbc.mutation.SetToUserID(u)
	return mbc
}

// SetAlreadyRead sets the "already_read" field.
func (mbc *MailBoxCreate) SetAlreadyRead(b bool) *MailBoxCreate {
	mbc.mutation.SetAlreadyRead(b)
	return mbc
}

// SetTitle sets the "title" field.
func (mbc *MailBoxCreate) SetTitle(s string) *MailBoxCreate {
	mbc.mutation.SetTitle(s)
	return mbc
}

// SetContent sets the "content" field.
func (mbc *MailBoxCreate) SetContent(s string) *MailBoxCreate {
	mbc.mutation.SetContent(s)
	return mbc
}

// SetCreateAt sets the "create_at" field.
func (mbc *MailBoxCreate) SetCreateAt(u uint32) *MailBoxCreate {
	mbc.mutation.SetCreateAt(u)
	return mbc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (mbc *MailBoxCreate) SetNillableCreateAt(u *uint32) *MailBoxCreate {
	if u != nil {
		mbc.SetCreateAt(*u)
	}
	return mbc
}

// SetUpdateAt sets the "update_at" field.
func (mbc *MailBoxCreate) SetUpdateAt(u uint32) *MailBoxCreate {
	mbc.mutation.SetUpdateAt(u)
	return mbc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (mbc *MailBoxCreate) SetNillableUpdateAt(u *uint32) *MailBoxCreate {
	if u != nil {
		mbc.SetUpdateAt(*u)
	}
	return mbc
}

// SetDeleteAt sets the "delete_at" field.
func (mbc *MailBoxCreate) SetDeleteAt(u uint32) *MailBoxCreate {
	mbc.mutation.SetDeleteAt(u)
	return mbc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (mbc *MailBoxCreate) SetNillableDeleteAt(u *uint32) *MailBoxCreate {
	if u != nil {
		mbc.SetDeleteAt(*u)
	}
	return mbc
}

// SetID sets the "id" field.
func (mbc *MailBoxCreate) SetID(u uuid.UUID) *MailBoxCreate {
	mbc.mutation.SetID(u)
	return mbc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mbc *MailBoxCreate) SetNillableID(u *uuid.UUID) *MailBoxCreate {
	if u != nil {
		mbc.SetID(*u)
	}
	return mbc
}

// Mutation returns the MailBoxMutation object of the builder.
func (mbc *MailBoxCreate) Mutation() *MailBoxMutation {
	return mbc.mutation
}

// Save creates the MailBox in the database.
func (mbc *MailBoxCreate) Save(ctx context.Context) (*MailBox, error) {
	var (
		err  error
		node *MailBox
	)
	mbc.defaults()
	if len(mbc.hooks) == 0 {
		if err = mbc.check(); err != nil {
			return nil, err
		}
		node, err = mbc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MailBoxMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mbc.check(); err != nil {
				return nil, err
			}
			mbc.mutation = mutation
			if node, err = mbc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mbc.hooks) - 1; i >= 0; i-- {
			if mbc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mbc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mbc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mbc *MailBoxCreate) SaveX(ctx context.Context) *MailBox {
	v, err := mbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mbc *MailBoxCreate) Exec(ctx context.Context) error {
	_, err := mbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mbc *MailBoxCreate) ExecX(ctx context.Context) {
	if err := mbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mbc *MailBoxCreate) defaults() {
	if _, ok := mbc.mutation.CreateAt(); !ok {
		v := mailbox.DefaultCreateAt()
		mbc.mutation.SetCreateAt(v)
	}
	if _, ok := mbc.mutation.UpdateAt(); !ok {
		v := mailbox.DefaultUpdateAt()
		mbc.mutation.SetUpdateAt(v)
	}
	if _, ok := mbc.mutation.DeleteAt(); !ok {
		v := mailbox.DefaultDeleteAt()
		mbc.mutation.SetDeleteAt(v)
	}
	if _, ok := mbc.mutation.ID(); !ok {
		v := mailbox.DefaultID()
		mbc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mbc *MailBoxCreate) check() error {
	if _, ok := mbc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "MailBox.app_id"`)}
	}
	if _, ok := mbc.mutation.FromUserID(); !ok {
		return &ValidationError{Name: "from_user_id", err: errors.New(`ent: missing required field "MailBox.from_user_id"`)}
	}
	if _, ok := mbc.mutation.ToUserID(); !ok {
		return &ValidationError{Name: "to_user_id", err: errors.New(`ent: missing required field "MailBox.to_user_id"`)}
	}
	if _, ok := mbc.mutation.AlreadyRead(); !ok {
		return &ValidationError{Name: "already_read", err: errors.New(`ent: missing required field "MailBox.already_read"`)}
	}
	if _, ok := mbc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "MailBox.title"`)}
	}
	if _, ok := mbc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "MailBox.content"`)}
	}
	if _, ok := mbc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "MailBox.create_at"`)}
	}
	if _, ok := mbc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "MailBox.update_at"`)}
	}
	if _, ok := mbc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "MailBox.delete_at"`)}
	}
	return nil
}

func (mbc *MailBoxCreate) sqlSave(ctx context.Context) (*MailBox, error) {
	_node, _spec := mbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (mbc *MailBoxCreate) createSpec() (*MailBox, *sqlgraph.CreateSpec) {
	var (
		_node = &MailBox{config: mbc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mailbox.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mailbox.FieldID,
			},
		}
	)
	_spec.OnConflict = mbc.conflict
	if id, ok := mbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mbc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: mailbox.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := mbc.mutation.FromUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: mailbox.FieldFromUserID,
		})
		_node.FromUserID = value
	}
	if value, ok := mbc.mutation.ToUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: mailbox.FieldToUserID,
		})
		_node.ToUserID = value
	}
	if value, ok := mbc.mutation.AlreadyRead(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: mailbox.FieldAlreadyRead,
		})
		_node.AlreadyRead = value
	}
	if value, ok := mbc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mailbox.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := mbc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mailbox.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := mbc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: mailbox.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := mbc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: mailbox.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := mbc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: mailbox.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MailBox.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MailBoxUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (mbc *MailBoxCreate) OnConflict(opts ...sql.ConflictOption) *MailBoxUpsertOne {
	mbc.conflict = opts
	return &MailBoxUpsertOne{
		create: mbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MailBox.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mbc *MailBoxCreate) OnConflictColumns(columns ...string) *MailBoxUpsertOne {
	mbc.conflict = append(mbc.conflict, sql.ConflictColumns(columns...))
	return &MailBoxUpsertOne{
		create: mbc,
	}
}

type (
	// MailBoxUpsertOne is the builder for "upsert"-ing
	//  one MailBox node.
	MailBoxUpsertOne struct {
		create *MailBoxCreate
	}

	// MailBoxUpsert is the "OnConflict" setter.
	MailBoxUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *MailBoxUpsert) SetAppID(v uuid.UUID) *MailBoxUpsert {
	u.Set(mailbox.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *MailBoxUpsert) UpdateAppID() *MailBoxUpsert {
	u.SetExcluded(mailbox.FieldAppID)
	return u
}

// SetFromUserID sets the "from_user_id" field.
func (u *MailBoxUpsert) SetFromUserID(v uuid.UUID) *MailBoxUpsert {
	u.Set(mailbox.FieldFromUserID, v)
	return u
}

// UpdateFromUserID sets the "from_user_id" field to the value that was provided on create.
func (u *MailBoxUpsert) UpdateFromUserID() *MailBoxUpsert {
	u.SetExcluded(mailbox.FieldFromUserID)
	return u
}

// SetToUserID sets the "to_user_id" field.
func (u *MailBoxUpsert) SetToUserID(v uuid.UUID) *MailBoxUpsert {
	u.Set(mailbox.FieldToUserID, v)
	return u
}

// UpdateToUserID sets the "to_user_id" field to the value that was provided on create.
func (u *MailBoxUpsert) UpdateToUserID() *MailBoxUpsert {
	u.SetExcluded(mailbox.FieldToUserID)
	return u
}

// SetAlreadyRead sets the "already_read" field.
func (u *MailBoxUpsert) SetAlreadyRead(v bool) *MailBoxUpsert {
	u.Set(mailbox.FieldAlreadyRead, v)
	return u
}

// UpdateAlreadyRead sets the "already_read" field to the value that was provided on create.
func (u *MailBoxUpsert) UpdateAlreadyRead() *MailBoxUpsert {
	u.SetExcluded(mailbox.FieldAlreadyRead)
	return u
}

// SetTitle sets the "title" field.
func (u *MailBoxUpsert) SetTitle(v string) *MailBoxUpsert {
	u.Set(mailbox.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MailBoxUpsert) UpdateTitle() *MailBoxUpsert {
	u.SetExcluded(mailbox.FieldTitle)
	return u
}

// SetContent sets the "content" field.
func (u *MailBoxUpsert) SetContent(v string) *MailBoxUpsert {
	u.Set(mailbox.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *MailBoxUpsert) UpdateContent() *MailBoxUpsert {
	u.SetExcluded(mailbox.FieldContent)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *MailBoxUpsert) SetCreateAt(v uint32) *MailBoxUpsert {
	u.Set(mailbox.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *MailBoxUpsert) UpdateCreateAt() *MailBoxUpsert {
	u.SetExcluded(mailbox.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *MailBoxUpsert) AddCreateAt(v uint32) *MailBoxUpsert {
	u.Add(mailbox.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *MailBoxUpsert) SetUpdateAt(v uint32) *MailBoxUpsert {
	u.Set(mailbox.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *MailBoxUpsert) UpdateUpdateAt() *MailBoxUpsert {
	u.SetExcluded(mailbox.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *MailBoxUpsert) AddUpdateAt(v uint32) *MailBoxUpsert {
	u.Add(mailbox.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *MailBoxUpsert) SetDeleteAt(v uint32) *MailBoxUpsert {
	u.Set(mailbox.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *MailBoxUpsert) UpdateDeleteAt() *MailBoxUpsert {
	u.SetExcluded(mailbox.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *MailBoxUpsert) AddDeleteAt(v uint32) *MailBoxUpsert {
	u.Add(mailbox.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MailBox.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mailbox.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *MailBoxUpsertOne) UpdateNewValues() *MailBoxUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(mailbox.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.MailBox.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *MailBoxUpsertOne) Ignore() *MailBoxUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MailBoxUpsertOne) DoNothing() *MailBoxUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MailBoxCreate.OnConflict
// documentation for more info.
func (u *MailBoxUpsertOne) Update(set func(*MailBoxUpsert)) *MailBoxUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MailBoxUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *MailBoxUpsertOne) SetAppID(v uuid.UUID) *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *MailBoxUpsertOne) UpdateAppID() *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.UpdateAppID()
	})
}

// SetFromUserID sets the "from_user_id" field.
func (u *MailBoxUpsertOne) SetFromUserID(v uuid.UUID) *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.SetFromUserID(v)
	})
}

// UpdateFromUserID sets the "from_user_id" field to the value that was provided on create.
func (u *MailBoxUpsertOne) UpdateFromUserID() *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.UpdateFromUserID()
	})
}

// SetToUserID sets the "to_user_id" field.
func (u *MailBoxUpsertOne) SetToUserID(v uuid.UUID) *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.SetToUserID(v)
	})
}

// UpdateToUserID sets the "to_user_id" field to the value that was provided on create.
func (u *MailBoxUpsertOne) UpdateToUserID() *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.UpdateToUserID()
	})
}

// SetAlreadyRead sets the "already_read" field.
func (u *MailBoxUpsertOne) SetAlreadyRead(v bool) *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.SetAlreadyRead(v)
	})
}

// UpdateAlreadyRead sets the "already_read" field to the value that was provided on create.
func (u *MailBoxUpsertOne) UpdateAlreadyRead() *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.UpdateAlreadyRead()
	})
}

// SetTitle sets the "title" field.
func (u *MailBoxUpsertOne) SetTitle(v string) *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MailBoxUpsertOne) UpdateTitle() *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.UpdateTitle()
	})
}

// SetContent sets the "content" field.
func (u *MailBoxUpsertOne) SetContent(v string) *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *MailBoxUpsertOne) UpdateContent() *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.UpdateContent()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *MailBoxUpsertOne) SetCreateAt(v uint32) *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *MailBoxUpsertOne) AddCreateAt(v uint32) *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *MailBoxUpsertOne) UpdateCreateAt() *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *MailBoxUpsertOne) SetUpdateAt(v uint32) *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *MailBoxUpsertOne) AddUpdateAt(v uint32) *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *MailBoxUpsertOne) UpdateUpdateAt() *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *MailBoxUpsertOne) SetDeleteAt(v uint32) *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *MailBoxUpsertOne) AddDeleteAt(v uint32) *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *MailBoxUpsertOne) UpdateDeleteAt() *MailBoxUpsertOne {
	return u.Update(func(s *MailBoxUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *MailBoxUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MailBoxCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MailBoxUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MailBoxUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MailBoxUpsertOne.ID is not supported by MySQL driver. Use MailBoxUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MailBoxUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MailBoxCreateBulk is the builder for creating many MailBox entities in bulk.
type MailBoxCreateBulk struct {
	config
	builders []*MailBoxCreate
	conflict []sql.ConflictOption
}

// Save creates the MailBox entities in the database.
func (mbcb *MailBoxCreateBulk) Save(ctx context.Context) ([]*MailBox, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mbcb.builders))
	nodes := make([]*MailBox, len(mbcb.builders))
	mutators := make([]Mutator, len(mbcb.builders))
	for i := range mbcb.builders {
		func(i int, root context.Context) {
			builder := mbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MailBoxMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mbcb *MailBoxCreateBulk) SaveX(ctx context.Context) []*MailBox {
	v, err := mbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mbcb *MailBoxCreateBulk) Exec(ctx context.Context) error {
	_, err := mbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mbcb *MailBoxCreateBulk) ExecX(ctx context.Context) {
	if err := mbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MailBox.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MailBoxUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (mbcb *MailBoxCreateBulk) OnConflict(opts ...sql.ConflictOption) *MailBoxUpsertBulk {
	mbcb.conflict = opts
	return &MailBoxUpsertBulk{
		create: mbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MailBox.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mbcb *MailBoxCreateBulk) OnConflictColumns(columns ...string) *MailBoxUpsertBulk {
	mbcb.conflict = append(mbcb.conflict, sql.ConflictColumns(columns...))
	return &MailBoxUpsertBulk{
		create: mbcb,
	}
}

// MailBoxUpsertBulk is the builder for "upsert"-ing
// a bulk of MailBox nodes.
type MailBoxUpsertBulk struct {
	create *MailBoxCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MailBox.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mailbox.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *MailBoxUpsertBulk) UpdateNewValues() *MailBoxUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(mailbox.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MailBox.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *MailBoxUpsertBulk) Ignore() *MailBoxUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MailBoxUpsertBulk) DoNothing() *MailBoxUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MailBoxCreateBulk.OnConflict
// documentation for more info.
func (u *MailBoxUpsertBulk) Update(set func(*MailBoxUpsert)) *MailBoxUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MailBoxUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *MailBoxUpsertBulk) SetAppID(v uuid.UUID) *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *MailBoxUpsertBulk) UpdateAppID() *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.UpdateAppID()
	})
}

// SetFromUserID sets the "from_user_id" field.
func (u *MailBoxUpsertBulk) SetFromUserID(v uuid.UUID) *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.SetFromUserID(v)
	})
}

// UpdateFromUserID sets the "from_user_id" field to the value that was provided on create.
func (u *MailBoxUpsertBulk) UpdateFromUserID() *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.UpdateFromUserID()
	})
}

// SetToUserID sets the "to_user_id" field.
func (u *MailBoxUpsertBulk) SetToUserID(v uuid.UUID) *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.SetToUserID(v)
	})
}

// UpdateToUserID sets the "to_user_id" field to the value that was provided on create.
func (u *MailBoxUpsertBulk) UpdateToUserID() *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.UpdateToUserID()
	})
}

// SetAlreadyRead sets the "already_read" field.
func (u *MailBoxUpsertBulk) SetAlreadyRead(v bool) *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.SetAlreadyRead(v)
	})
}

// UpdateAlreadyRead sets the "already_read" field to the value that was provided on create.
func (u *MailBoxUpsertBulk) UpdateAlreadyRead() *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.UpdateAlreadyRead()
	})
}

// SetTitle sets the "title" field.
func (u *MailBoxUpsertBulk) SetTitle(v string) *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MailBoxUpsertBulk) UpdateTitle() *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.UpdateTitle()
	})
}

// SetContent sets the "content" field.
func (u *MailBoxUpsertBulk) SetContent(v string) *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *MailBoxUpsertBulk) UpdateContent() *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.UpdateContent()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *MailBoxUpsertBulk) SetCreateAt(v uint32) *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *MailBoxUpsertBulk) AddCreateAt(v uint32) *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *MailBoxUpsertBulk) UpdateCreateAt() *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *MailBoxUpsertBulk) SetUpdateAt(v uint32) *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *MailBoxUpsertBulk) AddUpdateAt(v uint32) *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *MailBoxUpsertBulk) UpdateUpdateAt() *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *MailBoxUpsertBulk) SetDeleteAt(v uint32) *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *MailBoxUpsertBulk) AddDeleteAt(v uint32) *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *MailBoxUpsertBulk) UpdateDeleteAt() *MailBoxUpsertBulk {
	return u.Update(func(s *MailBoxUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *MailBoxUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MailBoxCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MailBoxCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MailBoxUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
