// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/third-login-gateway/pkg/db/ent/thirdparty"
	"github.com/google/uuid"
)

// ThirdParty is the model entity for the ThirdParty schema.
type ThirdParty struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// BrandName holds the value of the "brand_name" field.
	BrandName string `json:"brand_name,omitempty"`
	// Logo holds the value of the "logo" field.
	Logo string `json:"logo,omitempty"`
	// Domain holds the value of the "domain" field.
	Domain string `json:"domain,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ThirdParty) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case thirdparty.FieldCreatedAt, thirdparty.FieldUpdatedAt, thirdparty.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case thirdparty.FieldBrandName, thirdparty.FieldLogo, thirdparty.FieldDomain:
			values[i] = new(sql.NullString)
		case thirdparty.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ThirdParty", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ThirdParty fields.
func (tp *ThirdParty) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case thirdparty.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tp.ID = *value
			}
		case thirdparty.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tp.CreatedAt = uint32(value.Int64)
			}
		case thirdparty.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tp.UpdatedAt = uint32(value.Int64)
			}
		case thirdparty.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tp.DeletedAt = uint32(value.Int64)
			}
		case thirdparty.FieldBrandName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brand_name", values[i])
			} else if value.Valid {
				tp.BrandName = value.String
			}
		case thirdparty.FieldLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo", values[i])
			} else if value.Valid {
				tp.Logo = value.String
			}
		case thirdparty.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				tp.Domain = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ThirdParty.
// Note that you need to call ThirdParty.Unwrap() before calling this method if this ThirdParty
// was returned from a transaction, and the transaction was committed or rolled back.
func (tp *ThirdParty) Update() *ThirdPartyUpdateOne {
	return (&ThirdPartyClient{config: tp.config}).UpdateOne(tp)
}

// Unwrap unwraps the ThirdParty entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tp *ThirdParty) Unwrap() *ThirdParty {
	tx, ok := tp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ThirdParty is not a transactional entity")
	}
	tp.config.driver = tx.drv
	return tp
}

// String implements the fmt.Stringer.
func (tp *ThirdParty) String() string {
	var builder strings.Builder
	builder.WriteString("ThirdParty(")
	builder.WriteString(fmt.Sprintf("id=%v", tp.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", tp.CreatedAt))
	builder.WriteString(", updated_at=")
	builder.WriteString(fmt.Sprintf("%v", tp.UpdatedAt))
	builder.WriteString(", deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", tp.DeletedAt))
	builder.WriteString(", brand_name=")
	builder.WriteString(tp.BrandName)
	builder.WriteString(", logo=")
	builder.WriteString(tp.Logo)
	builder.WriteString(", domain=")
	builder.WriteString(tp.Domain)
	builder.WriteByte(')')
	return builder.String()
}

// ThirdParties is a parsable slice of ThirdParty.
type ThirdParties []*ThirdParty

func (tp ThirdParties) config(cfg config) {
	for _i := range tp {
		tp[_i].config = cfg
	}
}
